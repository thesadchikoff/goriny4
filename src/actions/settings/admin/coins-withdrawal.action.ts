import { BotContext } from '@/@types/scenes'
import configService from '@/db/config.service'
import userService from '@/db/user.service'
import { createTransaction, sendTransaction } from '@/trust-wallet/1'
import { Wallet } from '@prisma/client'

let isProcessRunning = false // –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞

export const coinsWithdrawalAction = async (ctx: BotContext) => {
	if (isProcessRunning) {
		// –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		await ctx.reply(
			'–ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.'
		)
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ "—Ä–∞–±–æ—Ç–∞–µ—Ç"
	isProcessRunning = true

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id
	const initialMessage = await ctx.reply(
		'–ó–∞–¥–∞—á–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–æ—à–µ–ª—å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ‚Ä¶\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –¥–∞–ª–µ–µ. –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –ø—Ä–æ—Ü–µ—Å—Å–∞ –í–∞–º –ø–æ—Å—Ç—É–ø–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.'
	)
	const userWallets = await userService.userWallets()
	const masterWallet = await configService.adminWallet()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
	startBackgroundTask(
		ctx,
		initialMessage.message_id,
		userWallets,
		masterWallet.adminWalletAddress!
	)
}

const startBackgroundTask = async (
	ctx: BotContext,
	messageId: number,
	wallets: Wallet[],
	masterAddress: string
) => {
	try {
		// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
		let successCount = 0;
		let errorCount = 0;
		let totalTransferred = 0;
		let processedCount = 0;
		let lastUpdateTime = Date.now();
		const updateInterval = 5000; // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Å—Ç–∞—Ç—É—Å–∞
		
		// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º Map –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö)
		const successfulTransfers = new Map<string, { amount: number; txHash: string }>();
		const failedTransfers = new Map<string, string>(); // –∞–¥—Ä–µ—Å -> –æ—à–∏–±–∫–∞
		
		// –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—à–µ–ª—å–∫–∏ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
		const walletsWithBalance = wallets.filter(wallet => 
			wallet.balance && parseFloat(wallet.balance.toString()) > 0.0001 // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–º–∏—Å—Å–∏–∏
		);

		if (walletsWithBalance.length === 0) {
			await ctx.telegram.editMessageText(
				ctx.chat!.id,
				messageId,
				undefined,
				'–ù–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0.0001 BTC.'
			);
			isProcessRunning = false;
			return;
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
		await ctx.telegram.editMessageText(
			ctx.chat!.id,
			messageId,
			undefined, 
			`–ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å ${walletsWithBalance.length} –∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–æ—à–µ–ª–µ–∫ ${masterAddress}...\n\n‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...`
		);
		
		// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
		const updateStatus = async (force = false) => {
			const now = Date.now();
			if (!force && now - lastUpdateTime < updateInterval) {
				return; // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
			}
			lastUpdateTime = now;
			
			const progressPercent = Math.floor((processedCount / walletsWithBalance.length) * 100);
			const progressBar = generateProgressBar(progressPercent);
			
			let statusMessage = `‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n\n`;
			statusMessage += `${progressBar} ${progressPercent}% (${processedCount}/${walletsWithBalance.length})\n\n`;
			statusMessage += `üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
			statusMessage += `‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${successCount}\n`;
			statusMessage += `‚Ä¢ –û—à–∏–±–æ–∫: ${errorCount}\n`;
			statusMessage += `‚Ä¢ –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: ${totalTransferred.toFixed(8)} BTC\n\n`;
			statusMessage += `‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏...`;
			
			try {
				await ctx.telegram.editMessageText(
					ctx.chat!.id,
					messageId,
					undefined,
					statusMessage
				);
			} catch (error) {
				// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)
				console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:", error);
			}
		};
		
		// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
		const generateProgressBar = (percent: number): string => {
			const completed = Math.floor(percent / 10);
			const remaining = 10 - completed;
			return '‚ñà'.repeat(completed) + '‚ñë'.repeat(remaining);
		};

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
		const batchSize = 200; // –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞
		const totalBatches = Math.ceil(walletsWithBalance.length / batchSize);
		
		for (let batchNum = 0; batchNum < totalBatches; batchNum++) {
			const startIdx = batchNum * batchSize;
			const endIdx = Math.min(startIdx + batchSize, walletsWithBalance.length);
			const currentBatch = walletsWithBalance.slice(startIdx, endIdx);
			
			// –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
			const batchPromises = currentBatch.map(wallet => 
				processWallet(wallet, masterAddress, successfulTransfers, failedTransfers)
					.then(result => {
						processedCount++;
						if (result.success) {
							successCount++;
							totalTransferred += result.amount || 0;
						} else {
							errorCount++;
						}
						return updateStatus(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
					})
			);
			
			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
			await processBatchWithRateLimit(batchPromises, 10); // 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
			
			// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞
			await updateStatus(true);
		}
		
		// –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
		const generateFinalReport = () => {
			let reportMessage = `‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n`;
			reportMessage += `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
			reportMessage += `‚Ä¢ –í—Å–µ–≥–æ –∫–æ—à–µ–ª—å–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${walletsWithBalance.length}\n`;
			reportMessage += `‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${successCount}\n`;
			reportMessage += `‚Ä¢ –û—à–∏–±–æ–∫: ${errorCount}\n`;
			reportMessage += `‚Ä¢ –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: ${totalTransferred.toFixed(8)} BTC\n\n`;
			
			// –°–æ–∑–¥–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
			// (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è - 4096 —Å–∏–º–≤–æ–ª–æ–≤)
			if (successCount > 0) {
				reportMessage += `‚úÖ –£—Å–ø–µ—à–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã: ${successCount}\n`;
				
				// –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20 —É—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
				if (successCount <= 20) {
					// –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
					let i = 0;
					for (const [address, data] of successfulTransfers.entries()) {
						const shortTxHash = data.txHash.substring(0, 8) + '...' + data.txHash.substring(data.txHash.length - 8);
						reportMessage += `${++i}. ${address}: ${data.amount.toFixed(8)} BTC (${shortTxHash})\n`;
					}
				} else {
					// –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –≥–¥–µ –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
					let i = 0;
					const iterator = successfulTransfers.entries();
					for (let j = 0; j < 10; j++) {
						const [address, data] = iterator.next().value;
						const shortTxHash = data.txHash.substring(0, 8) + '...' + data.txHash.substring(data.txHash.length - 8);
						reportMessage += `${++i}. ${address}: ${data.amount.toFixed(8)} BTC (${shortTxHash})\n`;
					}
					reportMessage += `... –∏ –µ—â–µ ${successCount - 10} –ø–µ—Ä–µ–≤–æ–¥–æ–≤\n`;
					reportMessage += `\nüìã –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –∑–∞–ø—Ä–æ—Å–∏–≤ –∫–æ–º–∞–Ω–¥—É /withdrawal_report\n\n`;
				}
			}
			
			if (errorCount > 0) {
				reportMessage += `\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã: ${errorCount}\n`;
				
				// –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20 –æ—à–∏–±–æ–∫ —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
				if (errorCount <= 20) {
					// –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
					let i = 0;
					for (const [address, error] of failedTransfers.entries()) {
						reportMessage += `${++i}. ${address}: ${error}\n`;
					}
				} else {
					// –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
					
					// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø—É
					const errorTypes = new Map<string, number>();
					for (const error of failedTransfers.values()) {
						const count = errorTypes.get(error) || 0;
						errorTypes.set(error, count + 1);
					}
					
					// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
					reportMessage += `–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º:\n`;
					for (const [errorType, count] of errorTypes.entries()) {
						reportMessage += `‚Ä¢ ${errorType}: ${count} –∫–æ—à–µ–ª—å–∫–æ–≤\n`;
					}
					
					reportMessage += `\nüìã –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –∑–∞–ø—Ä–æ—Å–∏–≤ –∫–æ–º–∞–Ω–¥—É /withdrawal_errors\n`;
				}
			}
			
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Ç—á–µ—Ç–∞—Ö
			withdrawalResults = {
				successfulTransfers: Object.fromEntries(successfulTransfers),
				failedTransfers: Object.fromEntries(failedTransfers),
				totalProcessed: walletsWithBalance.length,
				successCount,
				errorCount,
				totalTransferred,
				timestamp: new Date().toISOString()
			};
			
			return reportMessage;
		};
		
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
		const finalReport = generateFinalReport();
		await ctx.telegram.editMessageText(
			ctx.chat!.id,
			messageId,
			undefined,
			finalReport
		);

	} catch (err) {
		console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ–≤–æ–¥–∞:', err);

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–±–æ–µ
		await ctx.telegram.editMessageText(
			ctx.chat!.id,
			messageId,
			undefined,
			`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤: ${err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.`
		);
	} finally {
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
		isProcessRunning = false;
	}
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
let withdrawalResults: {
	successfulTransfers: Record<string, { amount: number; txHash: string }>;
	failedTransfers: Record<string, string>;
	totalProcessed: number;
	successCount: number;
	errorCount: number;
	totalTransferred: number;
	timestamp: string;
} | null = null;

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
 */
async function processWallet(
	wallet: Wallet, 
	masterAddress: string,
	successfulTransfers: Map<string, { amount: number; txHash: string }>,
	failedTransfers: Map<string, string>
): Promise<{ success: boolean; amount?: number }> {
	try {
		const balanceFloat = parseFloat(wallet.balance.toString());
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ UTXO –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
		const hasUtxo = await checkUtxoAvailability(wallet.address);
		if (!hasUtxo) {
			failedTransfers.set(wallet.address, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö UTXO –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞");
			return { success: false };
		}

		// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –Ω–µ–±–æ–ª—å—à–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π (0.5%)
		const feePercentage = 0.5; // 0.5% –∫–æ–º–∏—Å—Å–∏—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
		const txHash = await createTransaction(
			wallet.wif,
			balanceFloat,
			masterAddress,
			feePercentage
		);

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ null/undefined
		if (!txHash) {
			failedTransfers.set(wallet.address, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–ø—É—Å—Ç–æ–π —Ö–µ—à)");
			return { success: false };
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
		const broadcastResult = await sendTransaction(txHash);
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
		if (broadcastResult === null || broadcastResult === undefined) {
			failedTransfers.set(wallet.address, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–µ—Ç—å");
			return { success: false };
		}

		// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
		successfulTransfers.set(wallet.address, {
			amount: balanceFloat,
			txHash: typeof broadcastResult === 'string' ? broadcastResult : 'unknown'
		});

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–∞–Ω–∞ API
		await new Promise(resolve => setTimeout(resolve, 500 + Math.random() * 1000));
		
		return { success: true, amount: balanceFloat };
	} catch (error) {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
		const errorMessage = error instanceof Error ? error.message : String(error);
		failedTransfers.set(wallet.address, errorMessage);
		console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ—à–µ–ª—å–∫–∞ ${wallet.address}:`, error);
		return { success: false };
	}
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 */
async function processBatchWithRateLimit<T>(promises: Promise<T>[], concurrencyLimit: number): Promise<T[]> {
	const results: T[] = [];
	const running = new Set<Promise<T>>();
	
	// –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ –ø—Ä–æ–º–∏—Å–æ–≤
	const queue = [...promises];
	
	while (queue.length > 0 || running.size > 0) {
		// –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤ –¥–æ –ª–∏–º–∏—Ç–∞
		while (running.size < concurrencyLimit && queue.length > 0) {
			const promise = queue.shift()!;
			
			// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–º–∏—Å–∞
			const runPromise = promise.then(result => {
				running.delete(runPromise);
				return result;
			}).catch(error => {
				running.delete(runPromise);
				throw error;
			});
			
			running.add(runPromise);
			results.push(await runPromise);
		}
		
		// –ï—Å–ª–∏ –ø—É–ª –∑–∞–ø–æ–ª–Ω–µ–Ω, –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–∏—Å–∞
		if (running.size >= concurrencyLimit) {
			await Promise.race(running);
		}
	}
	
	return results;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è UTXO –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
async function checkUtxoAvailability(address: string): Promise<boolean> {
	try {
		// –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API Blockchain.info –∏–ª–∏ –¥—Ä—É–≥–∏–µ
		const response = await fetch(`https://blockchain.info/unspent?active=${address}`);
		
		// –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç UTXO
		if (response.ok) {
			const data = await response.json();
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ UTXO
			return data && 
				data.unspent_outputs && 
				Array.isArray(data.unspent_outputs) && 
				data.unspent_outputs.length > 0;
		}
		
		return false;
	} catch (error) {
		console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ UTXO –¥–ª—è ${address}:`, error);
		return false;
	}
}
