import { BotContext } from '@/@types/scenes'
import { backInlineKeyboard } from '@/keyboards/inline-keyboards/back.inline'
import { fullSupportTicketsInlineKeyboard } from '@/keyboards/inline-keyboards/full-support-ticket.inline'
import { prisma } from '@/prisma/prisma.client'
import { timeFormat } from '@/utils/time-format'

export const fullSupportTicketAction = async (ctx: BotContext) => {
	const ticketId = Number(ctx.match[1])
	const ticket = await prisma.ticket.findFirst({
		where: {
			id: ticketId,
		},
		include: {
			initiator: true,
			performer: true,
		},
	})
	if (!ticket) {
		return ctx.editMessageText(
			`üòî –ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ –µ–≥–æ —É–∂–µ –∑–∞–∫—Ä—ã–ª–∏.`,
			{
				reply_markup: {
					inline_keyboard: [backInlineKeyboard('support-tickets')],
				},
			}
		)
	}

	const performerTo =
		ticket.performer && `–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —É @${ticket.performer.username}`

	const actionButtons = [...fullSupportTicketsInlineKeyboard(ticketId)]

	const isActionButtonsView = ticket.status !== 'REVIEW' ? actionButtons : []

	return ctx.editMessageText(
		`–ó–∞–ø—Ä–æ—Å #${ticket.id} –æ—Ç @${
			ticket.initiator.username
		}\n\n<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:</b>\n${
			ticket.ticketMessage
		}\n\n–°–æ–∑–¥–∞–Ω: ${timeFormat(ticket.createdAt)}\n\n<b>${performerTo}</b>`,
		{
			parse_mode: 'HTML',
			reply_markup: {
				inline_keyboard: [
					...isActionButtonsView,
					backInlineKeyboard('support-tickets'),
				],
			},
		}
	)
}
