import { BotContext } from '@/@types/scenes'
import { backInlineKeyboard } from '@/keyboards/inline-keyboards/back.inline'
import { fullSupportTicketsInlineKeyboard } from '@/keyboards/inline-keyboards/full-support-ticket.inline'
import { pinnedTicketInlineKeyboard } from '@/keyboards/inline-keyboards/support/pinned-ticket.inline'
import { prisma } from '@/prisma/prisma.client'
import { timeFormat } from '@/utils/time-format'

export const fullSupportTicketAction = async (ctx: BotContext) => {
	if (!ctx.match) {
		return ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞', { show_alert: true })
	}
	
	const ticketId = Number(ctx.match[1])
	const ticket = await prisma.ticket.findFirst({
		where: {
			id: ticketId,
		},
		include: {
			initiator: true,
			performer: true,
		},
	})
	if (!ticket) {
		return ctx.editMessageText(
			`üòî –ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ –µ–≥–æ —É–∂–µ –∑–∞–∫—Ä—ã–ª–∏.`,
			{
				reply_markup: {
					inline_keyboard: [backInlineKeyboard('support-tickets')],
				},
			}
		)
	}

	const performerTo =
		ticket.performer && `–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —É @${ticket.performer.username}`

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
	let actionButtons = [];
	
	// –î–ª—è –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º —Ç–∏–∫–µ—Ç–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ REVIEW
	if (ticket.status === 'REVIEW' && ticket.performer && ticket.performer.id === ctx.from!.id.toString()) {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç, –∑–∞–∫—Ä—ã—Ç–∏–µ, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
		actionButtons = pinnedTicketInlineKeyboard(ticketId);
	} 
	// –î–ª—è —Ç–∏–∫–µ—Ç–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤–∑—è—Ç—ã –≤ —Ä–∞–±–æ—Ç—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
	else if (ticket.status === 'PENDING') {
		actionButtons = fullSupportTicketsInlineKeyboard(ticketId);
	}
	// –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ç–∏–∫–µ—Ç–æ–≤
	else {
		actionButtons = [[
			{
				callback_data: 'support-tickets',
				text: 'üîô –ö —Å–ø–∏—Å–∫—É —Ç–∏–∫–µ—Ç–æ–≤'
			}
		]];
	}

	return ctx.editMessageText(
		`–ó–∞–ø—Ä–æ—Å #${ticket.id} –æ—Ç @${
			ticket.initiator.username
		}\n\n<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:</b>\n${
			ticket.ticketMessage
		}\n\n–°–æ–∑–¥–∞–Ω: ${timeFormat(ticket.createdAt)}\n\n${performerTo ? `<b>${performerTo}</b>` : ''}`,
		{
			parse_mode: 'HTML',
			reply_markup: {
				inline_keyboard: actionButtons
			},
		}
	)
}
