import { BotContext } from '@/@types/scenes'
import { prisma } from '@/prisma/prisma.client'
import { backInlineKeyboard } from '@/keyboards/inline-keyboards/back.inline'

export const successTicketAction = async (ctx: BotContext) => {
    try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∏–∫–µ—Ç–∞ –∏–∑ callback_data
        if (!ctx.match) {
            return ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞', { show_alert: true })
        }
        
        const ticketId = Number(ctx.match[1])
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
        const ticket = await prisma.ticket.findFirst({
            where: {
                id: ticketId,
                performer: {
                    id: ctx.from!.id.toString()
                },
                status: 'REVIEW'
            },
            include: {
                initiator: true,
                performer: true
            }
        })
        
        if (!ticket) {
            return ctx.answerCbQuery(
                '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è.',
                { show_alert: true }
            )
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –Ω–∞ SUCCESS
        await prisma.ticket.update({
            where: {
                id: ticketId
            },
            data: {
                status: 'SUCCESS'
            }
        })
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await ctx.telegram.sendMessage(
            ticket.initiator.id,
            `<b>üü¢ –¢–∏–∫–µ—Ç #${ticketId} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç</b>\n\n–í–∞—à –∑–∞–ø—Ä–æ—Å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!`,
            {
                parse_mode: 'HTML'
            }
        )
        
        // –û—Ç–≤–µ—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await ctx.answerCbQuery('–¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç')
        
        return ctx.editMessageText(
            `‚úÖ <b>–¢–∏–∫–µ—Ç #${ticketId} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç</b>\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${ticket.initiator.username} —Ä–µ—à–µ–Ω.`,
            {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [backInlineKeyboard('support-tickets')]
                }
            }
        )
    } catch (error) {
        console.error('[SUCCESS_TICKET] Error:', error)
        return ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞', { show_alert: true })
    }
} 