import { BotContext } from '@/@types/scenes'
import { prisma } from '@/prisma/prisma.client'
import { pinnedTicketInlineKeyboard } from '@/keyboards/inline-keyboards/support/pinned-ticket.inline'
import { timeFormat } from '@/utils/time-format'

export const backToTicketAction = async (ctx: BotContext) => {
    try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∏–∫–µ—Ç–∞ –∏–∑ callback_data
        if (!ctx.match) {
            return ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞', { show_alert: true })
        }
        
        const ticketId = Number(ctx.match[1])
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
        const ticket = await prisma.ticket.findFirst({
            where: {
                id: ticketId,
                performer: {
                    id: ctx.from!.id.toString()
                }
            },
            include: {
                initiator: true,
                performer: true
            }
        })
        
        if (!ticket) {
            return ctx.answerCbQuery(
                '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.',
                { show_alert: true }
            )
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–∏–∫–µ—Ç—É
        await ctx.answerCbQuery()
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞
        let keyboard;
        if (ticket.status === 'REVIEW') {
            // –î–ª—è —Ç–∏–∫–µ—Ç–æ–≤ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∏—è
            keyboard = pinnedTicketInlineKeyboard(ticketId);
        } else {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
            keyboard = [
                [
                    {
                        callback_data: 'support-tickets',
                        text: 'üîô –ö —Å–ø–∏—Å–∫—É —Ç–∏–∫–µ—Ç–æ–≤'
                    }
                ]
            ];
        }
        
        return ctx.editMessageText(
            `<b>–¢–∏–∫–µ—Ç #${ticket.id} –æ—Ç @${ticket.initiator.username}</b>\n\n` +
            `<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:</b>\n${ticket.ticketMessage}\n\n` +
            `–°—Ç–∞—Ç—É—Å: ${ticket.status === 'REVIEW' ? 'üîµ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏' : 
                     ticket.status === 'SUCCESS' ? 'üü¢ –ò—Å–ø–æ–ª–Ω–µ–Ω' : 
                     ticket.status === 'DECLINE' ? 'üî¥ –û—Ç–∫–ª–æ–Ω–µ–Ω' : 'üü° –í –æ–∂–∏–¥–∞–Ω–∏–∏'}\n` +
            `–°–æ–∑–¥–∞–Ω: ${timeFormat(ticket.createdAt)}\n\n` +
            `<b>–í –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≤—ã.</b>`,
            {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: keyboard
                }
            }
        )
    } catch (error) {
        console.error('[BACK_TO_TICKET] Error:', error)
        return ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ç–∏–∫–µ—Ç—É', { show_alert: true })
    }
} 