import { BotContext } from '@/@types/scenes'
import { prisma } from '@/prisma/prisma.client'
import { backInlineKeyboard } from '@/keyboards/inline-keyboards/back.inline'

export const declineTicketAction = async (ctx: BotContext) => {
    try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∏–∫–µ—Ç–∞ –∏–∑ callback_data
        if (!ctx.match) {
            return ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞', { show_alert: true })
        }
        
        const ticketId = Number(ctx.match[1])
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
        const ticket = await prisma.ticket.findFirst({
            where: {
                id: ticketId
            },
            include: {
                initiator: true,
                performer: true
            }
        })
        
        if (!ticket) {
            return ctx.answerCbQuery(
                '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.',
                { show_alert: true }
            )
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Ç–∏–∫–µ—Ç)
        const user = await prisma.user.findFirst({
            where: {
                id: ctx.from!.id.toString(),
                isAdmin: true
            }
        })
        
        if (!user) {
            return ctx.answerCbQuery(
                '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.',
                { show_alert: true }
            )
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –Ω–∞ DECLINE
        await prisma.ticket.update({
            where: {
                id: ticketId
            },
            data: {
                status: 'DECLINE',
                performer: {
                    connect: {
                        id: ctx.from!.id.toString()
                    }
                }
            }
        })
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await ctx.telegram.sendMessage(
            ticket.initiator.id,
            `<b>üî¥ –¢–∏–∫–µ—Ç #${ticketId} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.`,
            {
                parse_mode: 'HTML'
            }
        )
        
        // –û—Ç–≤–µ—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await ctx.answerCbQuery('–¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω')
        
        return ctx.editMessageText(
            `<b>üî¥ –¢–∏–∫–µ—Ç #${ticketId} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${ticket.initiator.username}.`,
            {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [backInlineKeyboard('support-tickets')]
                }
            }
        )
    } catch (error) {
        console.error('[DECLINE_TICKET] Error:', error)
        return ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞', { show_alert: true })
    }
} 