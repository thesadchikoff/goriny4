import {BotContext} from "@/@types/scenes";
import adminNotifyModule from "@/core/admin/admin-notify.module";
import {bot} from "@/config/bot";
import userService from "@/db/user.service";

export const transactionNotifyForAdminAction = async (ctx: BotContext) => {
    try {
        const user = await userService.fetchOneById({
            id: ctx.from!.id
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–∞
        if (!(ctx.session as any).transfer || !(ctx.session as any).transfer.recipientAddress || !(ctx.session as any).countBTC) {
            console.error("–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç:", {
                transfer: (ctx.session as any).transfer,
                countBTC: (ctx.session as any).countBTC
            });
            return ctx.reply("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞–Ω–æ–≤–æ.");
        }
        
        const recipientAddress = (ctx.session as any).transfer.recipientAddress;
        const countBTC = (ctx.session as any).countBTC;
        
        console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:", {
            recipientAddress,
            countBTC
        });
        
        await bot.telegram.sendMessage(ctx.from!.id, '<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º</b>\n\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–∏–º—É—Ç —Ä–µ—à–µ–Ω–∏–µ, –≤—ã –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', {
            parse_mode: 'HTML'
        });
        
        return adminNotifyModule.sendNotify(`<b>–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${user!.username} —Ö–æ—á–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ <b>${countBTC} BTC</b> –Ω–∞ –∫–æ—à–µ–ª–µ–∫ <code>${recipientAddress}</code>`, [[
            {
                callback_data: 'confirm',
                text: 'üü¢ –û–¥–æ–±—Ä–∏—Ç—å'
            },
            {
                callback_data: 'reject',
                text: 'üî¥ –û—Ç–∫–ª–æ–Ω–∏—Ç—å'
            }
        ]]);
    } catch (error: any) {
        console.error("–û—à–∏–±–∫–∞ –≤ transactionNotifyForAdminAction:", error);
        return ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`);
    }
}