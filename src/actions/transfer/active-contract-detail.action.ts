import {BotContext} from "@/@types/scenes";
import {prisma} from "@/prisma/prisma.client";
import {previousButton} from "@/keyboards/inline-keyboards/previous-button.inline";
import {QueryTriggers} from "@/constants/query-triggers";
import {generateUrlForUser} from "@/utils/generate-user-url";
import currencyService from "@/service/currency.service";
import {currencyFormatter} from "@/utils/currency-formatter";

export const activeContractDetailAction = async (ctx: BotContext) => {
    try {
        if (!ctx.match) {
            return ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞', { show_alert: true })
        }

        const contractId = ctx.match[1]
        console.log('[ACTIVE_CONTRACT_DETAIL] Contract ID:', contractId)
        
        const contractTransaction = await prisma.contractTransaction.findFirst({
            where: {
                id: contractId
            },
            include: {
                buyer: true,
                seller: true,
                contract: {
                    include: {
                        ContractRequisite: {
                            include: {
                                paymentMethod: true
                            }
                        }
                    }
                }
            }
        })

        console.log('[ACTIVE_CONTRACT_DETAIL] Found transaction:', contractTransaction)

        if (!contractTransaction) {
            return ctx.answerCbQuery('–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', { show_alert: true })
        }

        const amountToBtc = await currencyService.convertRubleToBTC(
            contractTransaction.amount,
            contractTransaction.contract.currency!,
            false
        );

        const sellerUrl = generateUrlForUser(contractTransaction.seller!.login!)
        const buyerUrl = generateUrlForUser(contractTransaction.buyer!.login!)
        
        const isBuyer = ctx.from!.id.toString() === contractTransaction.buyerId
        const isSeller = ctx.from!.id.toString() === contractTransaction.sellerId

        if (!isBuyer && !isSeller) {
            return ctx.answerCbQuery('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏', { show_alert: true })
        }

        const buttons = []

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        if (isBuyer) {
            buttons.push([
                {
                    callback_data: `send-message-${contractTransaction.sellerId}`,
                    text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É'
                },
                {
                    callback_data: `payment-contract-${contractTransaction.id}`,
                    text: '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª'
                }
            ])
        }
        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
        else if (isSeller) {
            buttons.push([
                {
                    callback_data: `send-message-${contractTransaction.buyerId}`,
                    text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—é'
                },
                {
                    callback_data: `payment-successful-${contractTransaction.id}`,
                    text: '‚úÖ –î–µ–Ω—å–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã'
                }
            ])
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏
        buttons.push([
            {
                callback_data: `cancel-transaction-${contractTransaction.id}`,
                text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É'
            }
        ])

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        buttons.push(previousButton(QueryTriggers.ACTIVE_CONTRACTS()))

        return ctx.editMessageText(
            `<b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç #${contractTransaction.code}</b>\n\n` +
            `<b>–ü–æ–∫—É–ø–∞–µ—Ç: </b><a href="${buyerUrl}">${contractTransaction.buyer!.login}</a>\n` +
            `<b>–ü—Ä–æ–¥–∞–µ—Ç: </b><a href="${sellerUrl}">${contractTransaction.seller!.login}</a>\n` +
            `<b>–°—É–º–º–∞:</b> ${amountToBtc.toFixed(6)} BTC (${currencyFormatter(contractTransaction.amount, contractTransaction.contract.currency!)})\n\n` +
            `<b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã\n\n` +
            `<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> ${contractTransaction.contract.ContractRequisite?.paymentMethod.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
            `<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b> ${contractTransaction.contract.ContractRequisite?.paymentData || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}`,
            {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons
                }
            }
        )
    } catch (error) {
        console.error('[ACTIVE_CONTRACT_DETAIL] Error:', error)
        return ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Å–¥–µ–ª–∫–∏', { show_alert: true })
    }
}