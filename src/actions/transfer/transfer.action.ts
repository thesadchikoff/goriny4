import {BotContext} from "@/@types/scenes";
import {prisma} from "@/prisma/prisma.client";
import {createTransaction, sendTransaction} from "@/trust-wallet/1";
import userService from "@/db/user.service";
import { currencyFormatter } from "@/utils/currency-formatter";
import currencyService from "@/service/currency.service";

export const transferAction = async (ctx: BotContext) => {
   try {
       console.log("transferAction", (ctx.session as any).transfer);
       
       // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
       if (!(ctx.session as any).transfer || !(ctx.session as any).transfer.recipientAddress || !(ctx.session as any).countBTC) {
           console.error("–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç:", {
               transfer: (ctx.session as any).transfer,
               countBTC: (ctx.session as any).countBTC
           });
           return ctx.reply("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞–Ω–æ–≤–æ.");
       }
       
       // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       const user = await userService.fetchOneById({
           id: ctx.from!.id
       });
       
       if (!user || !user.wallet) {
           return ctx.reply("‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω");
       }
       
       // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ BTC
       const btcCount = (ctx.session as any).countBTC;
       
       if (!btcCount || btcCount <= 0) {
           return ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞");
       }
       
       // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
       const recipientAddress = (ctx.session as any).transfer?.recipientAddress;
       
       if (!recipientAddress) {
           return ctx.reply("‚ùå –û—à–∏–±–∫–∞: –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω");
       }
       
       // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏
       const globalConfig = await prisma.config.findFirst();
       
       if (!globalConfig) {
           return ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞");
       }
       
       // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é —Å–µ—Ä–≤–∏—Å–∞
       const feePercentage = globalConfig.feeForTransaction || 0;
       const feeAmount = btcCount * (feePercentage / 100);
       
       // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–π–¥–µ—Ç –¥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
       const recipientAmount = btcCount - feeAmount;
       
       // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
       if (user.wallet.balance < btcCount) {
           return ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${btcCount.toFixed(8)} BTC, –¥–æ—Å—Ç—É–ø–Ω–æ: ${user.wallet.balance.toFixed(8)} BTC`);
       }
       
       // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞
       await ctx.reply(`üîÑ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–≤–æ–¥ ${btcCount.toFixed(8)} BTC\n\n–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ (${feePercentage}%): ${feeAmount.toFixed(8)} BTC\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç: ${recipientAmount.toFixed(8)} BTC`);
       
       // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–ª—É—á–∞—Ç–µ–ª—é
       try {
           console.log(`–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ ${recipientAmount.toFixed(8)} BTC –Ω–∞ –∞–¥—Ä–µ—Å ${recipientAddress}`);
           const txHash = await createTransaction(
               user.wallet.wif, 
               recipientAmount, 
               recipientAddress, 
               globalConfig.feeForTransaction || 0
           );
           
           if (!txHash) {
               return ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å UTXO.");
           }
           
           console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞: ${txHash}`);
           await sendTransaction(txHash);
           
           // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–∏—Å—Å–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–µ –Ω–∞ –∞–¥—Ä–µ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
           if (feeAmount > 0 && globalConfig.adminWalletAddress) {
               console.log(`–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏ ${feeAmount.toFixed(8)} BTC –Ω–∞ –∞–¥—Ä–µ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${globalConfig.adminWalletAddress}`);
               const adminTxHash = await createTransaction(
                   user.wallet.wif, 
                   feeAmount, 
                   globalConfig.adminWalletAddress, 
                   globalConfig.feeForTransaction || 0
               );
               
               if (adminTxHash) {
                   console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∫–æ–º–∏—Å—Å–∏–∏ —Å–æ–∑–¥–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞: ${adminTxHash}`);
                   await sendTransaction(adminTxHash);
               } else {
                   console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏");
               }
           }
           
           // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
           await userService.changeUserBalance({
               params: { id: user.id },
               value: user.wallet.balance - btcCount
           });
           
           // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å BTC –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É–º–º—ã –≤ –≤–∞–ª—é—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
           const currency = await currencyService.getCurrency('bitcoin');
           const userCurrency = (user as any).currency?.value?.toLowerCase() || 'rub';
           
           let currencyMessage = '';
           if (currency?.bitcoin) {
               const btcValueInUserCurrency = btcCount * currency.bitcoin[userCurrency as 'rub' | 'usd' | 'eur'];
               currencyMessage = ` (‚âà${currencyFormatter(btcValueInUserCurrency, userCurrency)})`;
           }
           
           // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ
           await ctx.reply(
               `‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n` +
               `–°—É–º–º–∞: ${btcCount.toFixed(8)} BTC${currencyMessage}\n` +
               `–ö–æ–º–∏—Å—Å–∏—è: ${feeAmount.toFixed(8)} BTC\n` +
               `–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${recipientAddress}\n\n` +
               `–•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: \`${txHash}\``,
               { parse_mode: 'Markdown' }
           );
           
           // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
           (ctx.session as any).transfer = {};
           
           return ctx.scene.leave();
       } catch (txError: any) {
           console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", txError);
           return ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${txError.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`);
       }
   } catch (error: any) {
       console.error("–û—à–∏–±–∫–∞ –≤ transferAction:", error);
       return ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`);
   }
}