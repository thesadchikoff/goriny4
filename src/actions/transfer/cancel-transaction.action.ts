import { BotContext } from "@/@types/scenes";
import { prisma } from "@/prisma/prisma.client";
import { currencyFormatter } from "@/utils/currency-formatter";

/**
 * –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
 */
export const cancelTransactionAction = async (ctx: any) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç match –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('[CANCEL_TRANSACTION] Match object:', ctx.match);
        
        // –ü–æ–ª—É—á–∞–µ–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ callback_data
        const transactionId = ctx.match?.[1];
        
        console.log('[CANCEL_TRANSACTION] Received transaction ID:', transactionId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º callback_query –Ω–∞–ø—Ä—è–º—É—é
        const callbackQuery = ctx.callbackQuery;
        console.log('[CANCEL_TRANSACTION] Original callback object:', callbackQuery ? 'exists' : 'missing');
        
        if (!transactionId) {
            console.error('[CANCEL_TRANSACTION] Transaction ID not found in match data');
            return ctx.answerCbQuery('–û—à–∏–±–∫–∞: ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç UUID
        console.log('[CANCEL_TRANSACTION] Transaction ID format check:', /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(transactionId) ? 'Valid UUID' : 'Not UUID format');
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const allTransactions = await prisma.contractTransaction.findMany({
            take: 10
        });
        console.log('[CANCEL_TRANSACTION] All transactions (first 10):', 
            allTransactions.map(t => ({ id: t.id, buyerId: t.buyerId, sellerId: t.sellerId }))
        );
        
        // –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ id –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ isAccepted
        console.log('[CANCEL_TRANSACTION] Searching for transaction with ID:', transactionId);
        const transaction = await prisma.contractTransaction.findFirst({
            where: {
                id: transactionId // ID –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç UUID, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å
            },
            include: {
                buyer: true,
                seller: true,
                contract: {
                    include: {
                        ContractRequisite: {
                            include: {
                                paymentMethod: true
                            }
                        }
                    }
                }
            }
        });
        
        console.log('[CANCEL_TRANSACTION] Transaction found:', transaction ? 'Yes' : 'No');
        
        if (!transaction) {
            console.error('[CANCEL_TRANSACTION] Transaction not found in database');
            return ctx.answerCbQuery('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', { show_alert: true });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const userId = ctx.from?.id.toString();
        console.log('[CANCEL_TRANSACTION] User ID:', userId);
        console.log('[CANCEL_TRANSACTION] Buyer ID:', transaction.buyerId);
        console.log('[CANCEL_TRANSACTION] Seller ID:', transaction.sellerId);
        
        if (userId !== transaction.buyerId && userId !== transaction.sellerId) {
            console.error('[CANCEL_TRANSACTION] User is not a transaction participant');
            return ctx.answerCbQuery('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏', { show_alert: true });
        }
        
        // –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
        console.log('[CANCEL_TRANSACTION] Deleting transaction with ID:', transaction.id);
        try {
            await prisma.contractTransaction.delete({
                where: {
                    id: transaction.id
                }
            });
            console.log('[CANCEL_TRANSACTION] Transaction deleted successfully');
        } catch (deleteError) {
            console.error('[CANCEL_TRANSACTION] Error deleting transaction:', deleteError);
            return ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', { show_alert: true });
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –æ—Ç–º–µ–Ω—è–µ—Ç —Å–¥–µ–ª–∫—É
        const isBuyerCancelling = userId === transaction.buyerId;
        const cancellerRole = isBuyerCancelling ? '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å' : '–ø—Ä–æ–¥–∞–≤–µ—Ü';
        const otherPartyRole = isBuyerCancelling ? '–ø—Ä–æ–¥–∞–≤–µ—Ü' : '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å';
        const otherPartyId = isBuyerCancelling ? transaction.sellerId : transaction.buyerId;
        const otherPartyLogin = isBuyerCancelling ? transaction.seller?.login : transaction.buyer?.login;
        
        // –û–ø–æ–≤–µ—â–∞–µ–º –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É —Å–¥–µ–ª–∫–∏
        if (otherPartyId) {
            console.log(`[CANCEL_TRANSACTION] Notifying ${otherPartyRole}:`, otherPartyId);
            await ctx.telegram.sendMessage(
                otherPartyId,
                `‚ùå <b>–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n${cancellerRole} –æ—Ç–º–µ–Ω–∏–ª —Å–¥–µ–ª–∫—É #${transaction.contract.code}\n–°—É–º–º–∞: ${currencyFormatter(transaction.amount, transaction.contract.currency || 'RUB')}`,
                { parse_mode: 'HTML' }
            );
        }
        
        // –û–ø–æ–≤–µ—â–∞–µ–º –æ—Ç–º–µ–Ω—è—é—â–µ–≥–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        console.log('[CANCEL_TRANSACTION] Updating message for canceller');
        return ctx.editMessageText(
            `‚ùå <b>–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–¥–µ–ª–∫—É #${transaction.contract.code}\n–°—É–º–º–∞: ${currencyFormatter(transaction.amount, transaction.contract.currency || 'RUB')}\n\n${otherPartyRole}: ${otherPartyLogin}\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${transaction.contract.ContractRequisite?.paymentMethod.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}`,
            {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                callback_data: 'main_menu',
                                text: 'üìã –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                            }
                        ]
                    ]
                }
            }
        );
    } catch (error) {
        console.error('[CANCEL_TRANSACTION] Error:', error);
        return ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–¥–µ–ª–∫–∏', { show_alert: true });
    }
}; 