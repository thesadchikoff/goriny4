import {config} from '@/config/service.config'
import {previousButton} from '@/keyboards/inline-keyboards/previous-button.inline'
import {walletInlineKeyboard} from '@/keyboards/inline-keyboards/wallet.inline'
import {prisma} from '@/prisma/prisma.client'
import currencyService from '@/service/currency.service'
import {createWallet} from '@/trust-wallet/create-wallet'
import {currencyFormatter} from '@/utils/currency-formatter'
import {generateUrlForUser} from '@/utils/generate-user-url'
import {totalDays} from '@/utils/total-days'
import {Scenes} from 'telegraf'
import {WizardContext} from 'telegraf/typings/scenes'

export const walletAction = async (
	ctx: WizardContext<Scenes.WizardSessionData>
) => {
	try {
		const user = await prisma.user.findFirst({
			where: {
				id: String(ctx.from?.id),
			},
			include: {
				wallet: true
			}
		})
		const diffInDays = totalDays(user?.createdAt)
		const wallet = await createWallet(ctx.from!.id)
		const convertToRuble = await currencyService.convertRubleToBTC(wallet?.balance)
        const contractTransactions = await prisma.contractTransaction.findMany({
			where: {
				sellerId: ctx.from!.id.toString(),
			},
		})
		if (!wallet) {
			const userWallet = await prisma.user.findFirst({
				where: {
					id: ctx.from!.id.toString(),
				},
				include: {
					wallet: true,
				},
			})
			if (userWallet && userWallet.wallet) {
				const convertToRuble = await currencyService.convertRubleToBTC(userWallet.wallet.balance)
                const userUrl = generateUrlForUser(user?.login!)
				return ctx.editMessageText(
					`üè¶ <b>${
						config.shopName
					}</b>\n\n<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${user!.wallet!.balance!.toFixed(6)} BTC ‚âà ${currencyFormatter(
						Number(convertToRuble),
						'RUB'
					)}\n\n<b>–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏:</b> ${
						user?.totalAmountAdd
					} BTC\n<b>–í—ã –≤—ã–≤–µ–ª–∏:</b> ${
						user?.totalAmountReplenish
					} BTC\n\n<b>–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º:</b> <a href="${userUrl}">${
						user?.login
					}</a>\n\n<b>–û—Ç–∑—ã–≤—ã –æ –≤–∞—Å:</b> (0)üëç (0)üëé\n\n<b>–î–Ω–µ–π –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ:</b> ${diffInDays}\n<b>–í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ —É–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:</b> ${
						contractTransactions.length
					} –Ω–∞ —Å—É–º–º—É ${contractTransactions.reduce(
						(currentSum, currentTransaction) =>
							currentSum + currentTransaction.amount,
						0
					)} BTC\n<b>–í—ã –∑–∞—â–∏—â–µ–Ω—ã –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –æ—Ç –≤–∑–ª–æ–º–∞ –∏ –∫—Ä–∞–∂–∏ –≤–∞—à–∏—Ö BTC.</b>`,
					{
						parse_mode: 'HTML',

						reply_markup: {
							inline_keyboard: [
								...walletInlineKeyboard,
								[
									...previousButton('main_menu'),
									{
										callback_data: 'history_transfer',
										text: '‚è±Ô∏è –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤',
									},
								],
							],
						},
					}
				)
			}
			return ctx.editMessageText('–£ –í–∞—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω –∫–æ—à–µ–ª–µ–∫', {
				parse_mode: 'Markdown',
				reply_markup: {
					inline_keyboard: [previousButton('main_menu')],
				},
			})
		}
		const userUrl = generateUrlForUser(user?.login!)
		return ctx.editMessageText(
			`üè¶ <b>${
				config.shopName
			}</b>\n\n<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${wallet.balance} BTC ‚âà ${convertToRuble} RUB\n\n<b>–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏:</b> ${
				user?.totalAmountAdd
			} BTC\n<b>–í—ã –≤—ã–≤–µ–ª–∏:</b> ${
				user?.totalAmountReplenish
			} BTC\n\n<b>–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º:</b> <a href="${userUrl}">${
				user?.login
			}</a>\n\n<b>–û—Ç–∑—ã–≤—ã –æ –≤–∞—Å:</b> (0)üëç (0)üëé\n\n<b>–î–Ω–µ–π –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ:</b> ${diffInDays}\n<b>–í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ —É–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:</b> ${
				contractTransactions.length
			} –Ω–∞ —Å—É–º–º—É ${contractTransactions.reduce(
				(currentSum, currentTransaction) =>
					currentSum + currentTransaction.amount,
				0
			)} BTC\n<b>–í—ã –∑–∞—â–∏—â–µ–Ω—ã –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –æ—Ç –≤–∑–ª–æ–º–∞ –∏ –∫—Ä–∞–∂–∏ –≤–∞—à–∏—Ö BTC.</b>`,
			{
				parse_mode: 'HTML',

				reply_markup: {
					inline_keyboard: [
						...walletInlineKeyboard,
						[
							...previousButton('main_menu'),
							{
								callback_data: 'history_transfer',
								text: '‚è±Ô∏è –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤',
							},
						],
					],
				},
			}
		)
	} catch (error) {
		return ctx.reply(String(error))
	}
}
