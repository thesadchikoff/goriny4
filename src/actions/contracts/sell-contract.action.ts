import { BotContext } from '@/@types/scenes'
import { prisma } from '@/prisma/prisma.client'
import { dateFormat } from '@/utils/format-date'
import { previousButton } from '@/keyboards/inline-keyboards/previous-button.inline'
import { currencyFormatter } from '@/utils/currency-formatter'

export const sellContractAction = async (ctx: BotContext) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å match —Å ID –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        if (!ctx.match) {
            return ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞', { show_alert: true })
        }

        const itemId = Number(ctx.match[1])
        
        // –ù–∞–π–¥–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        const contract = await prisma.contract.findFirst({
            where: {
                id: itemId,
            },
            include: {
                author: true
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–¥–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ
        if (contract?.author.id === ctx.from?.id.toString()) {
            return ctx.answerCbQuery('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π', {
                show_alert: true
            });
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ —Å—Ü–µ–Ω–µ
        ctx.scene.state = {
            ...ctx.scene.state,
            contractId: itemId
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
        const contractDetails = await prisma.contract
            .findFirst({
                where: {
                    id: itemId,
                },
                include: {
                    author: {
                        include: {
                            SellerContractTransaction: true,
                        },
                    },
                    paymentMethod: true,
                },
            });
        
        if (!contractDetails) {
            return ctx.answerCbQuery('–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true })
        }
        
        const buttonText = contractDetails.type === 'buy' ? '–ü—Ä–æ–¥–∞—Ç—å' : '–ö—É–ø–∏—Ç—å'
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–π–¥–µ—Ä–∞
        const totalTransactions = contractDetails.author.SellerContractTransaction.length;
        // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–∞–∫ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Ä–∞
        const successfulTransactions = contractDetails.author.SellerContractTransaction.filter(t => !t.disputeId).length;
        const reputation = totalTransactions > 0 ? Math.round((successfulTransactions / totalTransactions) * 100) : 100;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return ctx.editMessageText(
            `üîç <b>–î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞</b>\n\n` +
            `üìã <b>ID –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:</b> #${contractDetails.code}\n` +
            `üí∞ <b>–¶–µ–Ω–∞ –∑–∞ 1 BTC:</b> ${currencyFormatter(
                contractDetails.amount,
                contractDetails.currency!
            )}\n` +
            `‚è± <b>–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> 15 –º–∏–Ω—É—Ç\n\n` +
            `üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–π–¥–µ—Ä–µ:</b>\n` +
            `‚Ä¢ –ò–º—è: /${contractDetails.author.login}\n` +
            `‚Ä¢ –†–µ–ø—É—Ç–∞—Ü–∏—è: ${reputation}% ${reputation >= 90 ? '‚≠êÔ∏è' : reputation >= 70 ? '‚úÖ' : '‚ö†Ô∏è'}\n` +
            `‚Ä¢ –û—Ç–∑—ã–≤—ã: üòä(${successfulTransactions}) üôÅ(${totalTransactions - successfulTransactions})\n` +
            `‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${dateFormat(contractDetails.author.createdAt)}\n\n` +
            `üìä <b>–£—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏:</b>\n` +
            `‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${currencyFormatter(
                contractDetails.price,
                contractDetails.currency!
            )}\n` +
            `‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${currencyFormatter(
                contractDetails.maxPrice!,
                contractDetails.currency!
            )}\n` +
            (contractDetails.paymentMethod ? `‚Ä¢ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${contractDetails.paymentMethod.name}\n` : '') +
            (contractDetails.comment ? `\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${contractDetails.comment}` : ''),
            {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                callback_data: `buy_contract`,
                                text: `‚úÖ ${buttonText}`,
                            },
                        ],
                        previousButton('sell'),
                    ],
                },
            }
        )
    } catch (error) {
        console.error('[SELL_CONTRACT] Error:', error)
        return ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞', { show_alert: true })
    }
} 