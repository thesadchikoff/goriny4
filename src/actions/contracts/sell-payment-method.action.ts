import { BotContext } from '@/@types/scenes'
import { prisma } from '@/prisma/prisma.client'
import { previousButton } from '@/keyboards/inline-keyboards/previous-button.inline'
import { currencyFormatter } from '@/utils/currency-formatter'
import { InlineKeyboardButton } from 'telegraf/typings/core/types/typegram'
import { QueryTriggers } from '@/constants/query-triggers'

export const sellPaymentMethodAction = async (ctx: BotContext) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å match —Å ID –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
        if (!ctx.match) {
            return ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞', { show_alert: true })
        }

        const itemId = Number(ctx.match[1])
        
        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
        const paymentMethod = await prisma.paymentMethod.findFirst({
            where: {
                id: itemId,
            },
        })
        
        if (!paymentMethod) {
            return ctx.answerCbQuery('–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true })
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
        const contracts = await prisma.contract.findMany({
            where: {
                paymentMethodId: paymentMethod.id,
                type: 'sell',
            },
            include: {
                author: true,
            },
        })
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        const contractsButtons: InlineKeyboardButton[][] = contracts.map(
            contract => {
                return [
                    {
                        callback_data: QueryTriggers.SELL_CONTRACT(contract.id),
                        text: `${contract.author.username} | ${currencyFormatter(
                            contract.amount,
                            contract.currency!
                        )} | ${currencyFormatter(
                            contract.price,
                            contract.currency!
                        )} - ${currencyFormatter(
                            contract.maxPrice!,
                            contract.currency!
                        )}`,
                    },
                ]
            }
        )
        
        return ctx.editMessageText(
            `üí≥ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å BTC –∑–∞ RUB —á–µ—Ä–µ–∑ ${paymentMethod.name}.`,
            {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [...contractsButtons, previousButton('sell')],
                },
            }
        )
    } catch (error) {
        console.error('[SELL_PAYMENT_METHOD] Error:', error)
        return ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞', { show_alert: true })
    }
} 