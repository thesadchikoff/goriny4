import { BotContext } from '@/@types/scenes'
import { prisma } from '@/prisma/prisma.client'
import { currencyFormatter } from '@/utils/currency-formatter'

export const paymentConfirmationAction = async (ctx: BotContext) => {
    try {
        if (!ctx.match) {
            return ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞', { show_alert: true })
        }

        const transactionId = ctx.match[1]
        console.log('[PAYMENT_CONFIRMATION] Transaction ID:', transactionId)
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const transaction = await prisma.contractTransaction.findFirst({
            where: {
                id: transactionId
            },
            include: {
                buyer: true,
                seller: true,
                contract: {
                    include: {
                        ContractRequisite: true
                    }
                }
            }
        })

        console.log('[PAYMENT_CONFIRMATION] Found transaction:', transaction)

        if (!transaction) {
            return ctx.answerCbQuery('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', { show_alert: true })
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º
        const isBuyer = ctx.from?.id.toString() === transaction.buyerId
        const isSeller = ctx.from?.id.toString() === transaction.sellerId

        if (!isBuyer && !isSeller) {
            return ctx.answerCbQuery('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è', { show_alert: true })
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–Ø –æ–ø–ª–∞—Ç–∏–ª" –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º
        if (isBuyer) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            await ctx.editMessageText(
                `‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É\n\n` +
                `üìä –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏:\n` +
                `‚Ä¢ –ù–æ–º–µ—Ä: #${transaction.code}\n` +
                `‚Ä¢ –°—É–º–º–∞: ${currencyFormatter(transaction.amount, transaction.contract.currency!)}\n` +
                `‚Ä¢ BTC: ${transaction.purchaseAmount.toFixed(8)} BTC\n\n` +
                `‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞`,
                {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    callback_data: `cancel-transaction-${transaction.id}`,
                                    text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É'
                                }
                            ]
                        ]
                    }
                }
            )

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
            await ctx.telegram.sendMessage(
                transaction.sellerId!,
                `üîî –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É!\n\n` +
                `üìä –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏:\n` +
                `‚Ä¢ –ù–æ–º–µ—Ä: #${transaction.code}\n` +
                `‚Ä¢ –°—É–º–º–∞: ${currencyFormatter(transaction.amount, transaction.contract.currency!)}\n` +
                `‚Ä¢ BTC: ${transaction.purchaseAmount.toFixed(8)} BTC\n\n` +
                `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–µ–Ω—å–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã"`,
                {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    callback_data: `payment-successful-${transaction.id}`,
                                    text: '‚úÖ –î–µ–Ω—å–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã'
                                }
                            ],
                            [
                                {
                                    callback_data: `cancel-transaction-${transaction.id}`,
                                    text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É'
                                }
                            ]
                        ]
                    }
                }
            )
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–µ–Ω—å–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã" –ø—Ä–æ–¥–∞–≤—Ü–æ–º
        else if (isSeller) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (!transaction.buyerId || !transaction.sellerId) {
                return ctx.answerCbQuery('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', { show_alert: true })
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
            const buyerWallet = await prisma.wallet.findFirst({
                where: {
                    user: {
                        id: transaction.buyerId
                    }
                }
            })

            const sellerWallet = await prisma.wallet.findFirst({
                where: {
                    user: {
                        id: transaction.sellerId
                    }
                }
            })

            if (!buyerWallet || !sellerWallet) {
                return ctx.answerCbQuery('–û—à–∏–±–∫–∞: –∫–æ—à–µ–ª—å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', { show_alert: true })
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ —É –ø—Ä–æ–¥–∞–≤—Ü–∞
            if (sellerWallet.balance < transaction.purchaseAmount) {
                return ctx.answerCbQuery('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –ø—Ä–æ–¥–∞–≤—Ü–∞', { show_alert: true })
            }

            // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
            await prisma.$transaction(async (prisma) => {
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
                await prisma.wallet.update({
                    where: { id: buyerWallet.id },
                    data: {
                        balance: {
                            increment: transaction.purchaseAmount
                        }
                    }
                })

                // –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–æ–¥–∞–≤—Ü–∞
                await prisma.wallet.update({
                    where: { id: sellerWallet.id },
                    data: {
                        balance: {
                            decrement: transaction.purchaseAmount
                        }
                    }
                })
            })

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
            await ctx.telegram.sendMessage(
                transaction.buyerId!,
                `‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
                `üìä –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏:\n` +
                `‚Ä¢ –ù–æ–º–µ—Ä: #${transaction.code}\n` +
                `‚Ä¢ –°—É–º–º–∞: ${currencyFormatter(transaction.amount, transaction.contract.currency!)}\n` +
                `‚Ä¢ BTC: ${transaction.purchaseAmount.toFixed(8)} BTC\n\n` +
                `üí∞ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${transaction.purchaseAmount.toFixed(8)} BTC`,
                {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    callback_data: 'main_menu',
                                    text: '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                                }
                            ]
                        ]
                    }
                }
            )

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø—Ä–æ–¥–∞–≤—Ü–∞
            await ctx.editMessageText(
                `‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
                `üìä –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏:\n` +
                `‚Ä¢ –ù–æ–º–µ—Ä: #${transaction.code}\n` +
                `‚Ä¢ –°—É–º–º–∞: ${currencyFormatter(transaction.amount, transaction.contract.currency!)}\n` +
                `‚Ä¢ BTC: ${transaction.purchaseAmount.toFixed(8)} BTC\n\n` +
                `üí∞ –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ ${transaction.purchaseAmount.toFixed(8)} BTC`,
                {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    callback_data: 'main_menu',
                                    text: '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                                }
                            ]
                        ]
                    }
                }
            )

            // –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await prisma.contractTransaction.delete({
                where: {
                    id: transaction.id
                }
            });

            // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            await prisma.contract.delete({
                where: {
                    id: transaction.contractId
                }
            });
        }

        return ctx.answerCbQuery()
    } catch (error) {
        console.error('[PAYMENT_CONFIRMATION] Error:', error)
        return ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞', { show_alert: true })
    }
} 