import { BotContext } from '@/@types/scenes'
import { prisma } from '@/prisma/prisma.client'
import frozenBalanceService from '@/service/frozen-balance.service'
import { previousButton } from '@/keyboards/inline-keyboards/previous-button.inline'

export const deleteContractAction = async (ctx: BotContext) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å match —Å ID –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        if (!ctx.match) {
            return ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞', { show_alert: true })
        }

        const itemId = Number(ctx.match[1])
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        const contractToDelete = await prisma.contract.findFirst({
            where: {
                id: itemId
            },
            include: {
                author: {
                    include: {
                        wallet: true
                    }
                }
            }
        })
        
        if (!contractToDelete) {
            return ctx.answerCbQuery('–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true })
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
        let frozenInfo = null
        
        // –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–∏–ø–∞ "sell", –Ω—É–∂–Ω–æ —Ä–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å BTC
        if (contractToDelete.type === 'sell') {
            console.log(`[CONTRACT_DELETE] Unfreezing ${contractToDelete.amount} BTC for contract #${contractToDelete.id}`)
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
            frozenInfo = await frozenBalanceService.checkAvailableBalance(
                contractToDelete.author.id,
                0 // 0, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—É–º–º—ã
            )
            
            console.log(`[CONTRACT_DELETE] Before unfreezing - Total: ${frozenInfo.totalBalance}, Frozen: ${frozenInfo.frozenBalance}, Available: ${frozenInfo.availableBalance}`)
            
            // –†–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
            const unfreezeResult = await frozenBalanceService.unfreezeBalance(
                contractToDelete.author.id,
                contractToDelete.id
            )
            
            if (!unfreezeResult) {
                console.error(`[CONTRACT_DELETE] Failed to unfreeze balance for contract #${contractToDelete.id}`)
                return ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ—Ä–æ–∑–∫–µ —Å—Ä–µ–¥—Å—Ç–≤', { show_alert: true })
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
            const newFrozenInfo = await frozenBalanceService.checkAvailableBalance(
                contractToDelete.author.id,
                0
            )
            
            console.log(`[CONTRACT_DELETE] After unfreezing - Total: ${newFrozenInfo.totalBalance}, Frozen: ${newFrozenInfo.frozenBalance}, Available: ${newFrozenInfo.availableBalance}`)
        }
        
        // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        await prisma.contract.delete({
            where: {
                id: itemId
            }
        })
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
        await ctx.telegram.sendMessage(
            contractToDelete.author.id,
            `üóë –í–∞—à –∫–æ–Ω—Ç—Ä–∞–∫—Ç #${contractToDelete.id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.${
                contractToDelete.type === 'sell' 
                ? `\n\nüí∞ ${contractToDelete.amount} BTC –±—ã–ª–∏ —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.` 
                : ''
            }`
        )
        
        return ctx.editMessageText(
            `‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç #${contractToDelete.id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [previousButton]
                    ]
                }
            }
        )
    } catch (error) {
        console.error('[DELETE_CONTRACT] Error:', error)
        return ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞', { show_alert: true })
    }
} 