import { BotContext } from '@/@types/scenes'
import { prisma } from '@/prisma/prisma.client'
import currencyService from '@/service/currency.service'
import { currencyFormatter } from '@/utils/currency-formatter'
import { previousButton } from '@/keyboards/inline-keyboards/previous-button.inline'

export const selfContractAction = async (ctx: BotContext) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å match —Å ID –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        if (!ctx.match) {
            return ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞', { show_alert: true })
        }

        const itemId = Number(ctx.match[1])
        const course = await currencyService.getCurrency('bitcoin')
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const contract = await prisma.contract.findFirst({
            where: {
                id: itemId,
            },
            include: {
                paymentMethod: true,
                ContractTransaction: true
            },
        })

        if (!contract) {
            return ctx.answerCbQuery('–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true })
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        const contractRequisite = await prisma.contractRequisite.findFirst({
            where: {
                id: Number(contract.contractRequisiteId),
            },
            include: {
                paymentMethod: true
            }
        })

        const buttons = []
        
        // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        const activeTransactions = await prisma.contractTransaction.findMany({
            where: {
                contractId: contract.id,
                isAccepted: false
            }
        })

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        if (activeTransactions.length > 0) {
            buttons.push([
                {
                    callback_data: `cancel-transaction-${activeTransactions[0].id}`,
                    text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É',
                }
            ])
        }
        
        // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        buttons.push([
            {
                callback_data: `edit-contract-description-${contract.id}`,
                text: 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ',
            },
        ])
        
        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        buttons.push([
            {
                callback_data: `delete-contract-${contract.id}`,
                text: 'üóë –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç',
            },
        ])
        
        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        buttons.push(previousButton('my_ads'))
        
        return ctx.editMessageText(
            `üì∞ –ó–∞—è–≤–∫–∞ <a>#${contract.id}</a>\n\n` +
            `<b>–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:</b> ${contractRequisite?.paymentMethod.name} | ${contractRequisite?.paymentData}\n` +
            `<b>–ö—É—Ä—Å 1 BTC: </b>${currencyFormatter(course?.bitcoin.rub!, 'rub')}\n` +
            `<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> ${contract.price} ${contract.currency}\n` +
            `<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> ${contract.maxPrice} ${contract.currency}` +
            (contract.comment ? `\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${contract.comment}` : ''),
            {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: buttons
                },
            }
        )
    } catch (error) {
        console.error('[SELF_CONTRACT] Error:', error)
        return ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞', { show_alert: true })
    }
} 