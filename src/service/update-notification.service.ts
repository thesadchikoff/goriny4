import { prisma } from '@/prisma/prisma.client'
import { BotContext } from '@/@types/scenes'
import { versionService } from './version.service'
import userService from '@/db/user.service'
import { bot } from '@/config/bot'

class UpdateNotificationService {
  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞
   */
  async createUpdate(title: string, description: string): Promise<void> {
    const currentVersion = versionService.getVersion()
    
    await prisma.botUpdate.create({
      data: {
        version: currentVersion,
        title,
        description,
        isActive: true
      }
    })
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
   */
  async getLatestUpdate() {
    return prisma.botUpdate.findFirst({
      where: {
        isActive: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    })
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   */
  async sendUpdateNotificationToAllUsers(): Promise<void> {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
    
    const update = await this.getLatestUpdate()
    if (!update) {
      console.log('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
      return
    }
    
    console.log('–ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', update)

    const users = await userService.fetchAll()
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`)
    
    for (const user of users) {
      try {
        console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.id}`)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const userWithNotification = await prisma.user.findUnique({
          where: { id: user.id },
          select: { lastUpdateNotification: true }
        })
        
        if (userWithNotification?.lastUpdateNotification && 
            userWithNotification.lastUpdateNotification >= update.createdAt) {
          console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} —É–∂–µ –ø–æ–ª—É—á–∞–ª —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`)
          continue
        }
        
        console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}`)
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        await bot.telegram.sendMessage(
          user.id,
          `üöÄ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞</b>\n\n` +
          `üìå <b>${update.title}</b>\n\n` +
          `${update.description}\n\n` +
          `üìä <b>–í–µ—Ä—Å–∏—è:</b> <code>${update.version}</code>\n` +
          `üìÖ <b>–î–∞—Ç–∞:</b> ${update.createdAt.toLocaleString('ru-RU')}\n\n` +
          `–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! üôè`,
          { parse_mode: 'HTML' }
        )
        
        console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}`)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await prisma.user.update({
          where: { id: user.id },
          data: { lastUpdateNotification: new Date() }
        })
        
        console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`)
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`, error)
      }
    }
    
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendUpdateNotificationToUser(ctx: BotContext): Promise<void> {
    const update = await this.getLatestUpdate()
    if (!update) return

    const user = await userService.fetchOneById({ id: ctx.from!.id })
    if (!user) return

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const userWithNotification = await prisma.user.findUnique({
      where: { id: user.id },
      select: { lastUpdateNotification: true }
    })
    
    if (userWithNotification?.lastUpdateNotification && 
        userWithNotification.lastUpdateNotification >= update.createdAt) {
      return
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    await ctx.reply(
      `üöÄ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞</b>\n\n` +
      `üìå <b>${update.title}</b>\n\n` +
      `${update.description}\n\n` +
      `üìä <b>–í–µ—Ä—Å–∏—è:</b> <code>${update.version}</code>\n` +
      `üìÖ <b>–î–∞—Ç–∞:</b> ${update.createdAt.toLocaleString('ru-RU')}\n\n` +
      `–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! üôè`,
      { parse_mode: 'HTML' }
    )

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await prisma.user.update({
      where: { id: user.id },
      data: { lastUpdateNotification: new Date() }
    })
  }
}

export const updateNotificationService = new UpdateNotificationService() 