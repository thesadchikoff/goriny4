import { Context } from 'telegraf'
import fs from 'fs';
import path from 'path';
import { logErrorWithAutoDetails } from '@/core/logs/log-error-to-file';
import { prisma } from '@/prisma/prisma.client';
import * as cron from 'node-cron';
import messages from '@/config/bot.config.json'
import { logInfo } from '@/core/logs/logger';

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
 * @returns –û–±—ä–µ–∫—Ç —Å –ø—É—Ç—è–º–∏ –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ç–∏–ø–∞–º –ª–æ–≥–æ–≤
 */
const getLogFiles = () => {
  const logsDir = path.resolve(process.cwd(), 'logs');
  const files = fs.readdirSync(logsDir);
  
  // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ª–æ–≥–æ–≤
  const latestAppLog = files
    .filter(file => file.startsWith('app-') && file.endsWith('.log'))
    .sort()
    .pop();
  
  const latestErrorLog = files
    .filter(file => file.startsWith('error-') && file.endsWith('.log'))
    .sort()
    .pop();
  
  // –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
  const appLogPath = latestAppLog ? path.join(logsDir, latestAppLog) : null;
  const errorLogPath = latestErrorLog ? path.join(logsDir, latestErrorLog) : null;
  
  return {
    appLogPath,
    errorLogPath,
    logsDir,
    allLogs: {
      app: files.filter(file => file.startsWith('app-') && file.endsWith('.log')).map(file => path.join(logsDir, file)),
      error: files.filter(file => file.startsWith('error-') && file.endsWith('.log')).map(file => path.join(logsDir, file))
    },
    filesList: files.filter(file => file.endsWith('.log'))
  };
};

/**
 * –£–¥–∞–ª—è–µ—Ç –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤ –¥–Ω—è—Ö
 * @param daysToKeep –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
 */
const cleanupOldLogs = (daysToKeep = 30) => {
  try {
    const { logsDir, filesList } = getLogFiles();
    const now = new Date();
    const deletedFiles = [];
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –ª–æ–≥–æ–≤
    for (const file of filesList) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (—Ñ–æ—Ä–º–∞—Ç app-YYYY-MM-DD.log –∏–ª–∏ error-YYYY-MM-DD.log)
      const dateMatch = file.match(/-([\d]{4})-([\d]{2})-([\d]{2})\.log$/);
      
      if (dateMatch) {
        const [, year, month, day] = dateMatch;
        const fileDate = new Date(`${year}-${month}-${day}`);
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö
        const diffTime = now.getTime() - fileDate.getTime();
        const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
        
        // –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ - —É–¥–∞–ª—è–µ–º
        if (diffDays > daysToKeep) {
          const filePath = path.join(logsDir, file);
          fs.unlinkSync(filePath);
          deletedFiles.push(file);
        }
      }
    }
    
    return {
      success: true,
      message: `–£–¥–∞–ª–µ–Ω–æ ${deletedFiles.length} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤`,
      deletedFiles
    };
  } catch (error: any) {
    logErrorWithAutoDetails(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: ${error.message}`, 'cleanupOldLogs');
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: ${error.message}`,
      deletedFiles: []
    };
  }
};

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export const cleanupLogsCommand = async (ctx: Context) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!(await checkAdminRights(ctx))) {
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
    let daysToKeep = 30;
    const message = (ctx as any).message?.text || '';
    const args = message.split(' ');
    
    if (args.length > 1 && !isNaN(parseInt(args[1]))) {
      daysToKeep = parseInt(args[1]);
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
    const result = cleanupOldLogs(daysToKeep);
    
    if (result.success) {
      if (result.deletedFiles.length > 0) {
        await ctx.reply(`‚úÖ ${result.message}:\n\n${result.deletedFiles.join('\n')}`);
      } else {
        await ctx.reply(`‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ ${daysToKeep} –¥–Ω–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.`);
      }
    } else {
      await ctx.reply(`‚ùå ${result.message}`);
    }
  } catch (error: any) {
    logErrorWithAutoDetails(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: ${error.message}`, 'cleanupLogsCommand');
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤.');
  }
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
 */
export const scheduleLogsCleanup = () => {
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –≤ 3:00 —É—Ç—Ä–∞ –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
  cron.schedule('0 3 * * 1', () => {
    try {
      const result = cleanupOldLogs();
      if (result.success) {
        logInfo(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤: ${result.message}`, {
          deletedFiles: result.deletedFiles
        });
      } else {
        logErrorWithAutoDetails(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: ${result.message}`, 'scheduleLogsCleanup');
      }
    } catch (error: any) {
      logErrorWithAutoDetails(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: ${error.message}`, 'scheduleLogsCleanup');
    }
  }, {
    timezone: 'Europe/Moscow' // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
  });
  
  console.log('–ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ)');
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns –ò–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */
const checkAdminRights = async (ctx: Context) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  const userId = ctx.from?.id.toString();
  
  if (!userId) {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ isAdmin –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const user = await prisma.user.findFirst({
    where: {
      id: userId,
    },
  });
  
  if (!user || !user.isAdmin) {
    await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    return false;
  }
  
  return true;
};

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export const getLogsCommand = async (ctx: Context) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!(await checkAdminRights(ctx))) {
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ª–æ–≥–æ–≤
    const { appLogPath, errorLogPath } = getLogFiles();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤
    if (errorLogPath) {
      await ctx.replyWithDocument({
        source: errorLogPath,
        filename: path.basename(errorLogPath)
      });
    }
    
    if (appLogPath) {
      await ctx.replyWithDocument({
        source: appLogPath,
        filename: path.basename(appLogPath)
      });
    }
    
    await ctx.reply('–§–∞–π–ª—ã –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.');
  } catch (error: any) {
    logErrorWithAutoDetails(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤: ${error.message}`, 'getLogsCommand');
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤.');
  }
};

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export const getLogsListCommand = async (ctx: Context) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!(await checkAdminRights(ctx))) {
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
    const { filesList } = getLogFiles();
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤
    const fileListMessage = filesList
      .map(file => `‚Ä¢ ${file}`)
      .join('\n');
    
    await ctx.reply(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤:\n\n${fileListMessage}\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /getlog –∏–º—è_—Ñ–∞–π–ª–∞`);
  } catch (error: any) {
    logErrorWithAutoDetails(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–æ–≥–æ–≤: ${error.message}`, 'getLogsListCommand');
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–æ–≥–æ–≤:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–æ–≥–æ–≤.');
  }
};

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export const getSpecificLogCommand = async (ctx: any) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!(await checkAdminRights(ctx))) {
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    const message = ctx.message.text;
    const args = message.split(' ');
    
    if (args.length < 2) {
      await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /getlog app-2023-06-01.log');
      return;
    }
    
    const fileName = args[1];
    const { logsDir, filesList } = getLogFiles();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!filesList.includes(fileName)) {
      await ctx.reply(`–§–∞–π–ª "${fileName}" –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /getlogslist –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.`);
      return;
    }
    
    const filePath = path.join(logsDir, fileName);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    await ctx.replyWithDocument({
      source: filePath,
      filename: fileName
    });
    
    await ctx.reply(`–§–∞–π–ª "${fileName}" —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.`);
  } catch (error: any) {
    logErrorWithAutoDetails(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–∞: ${error.message}`, 'getSpecificLogCommand');
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞.');
  }
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ —á–∞—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
 * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 */
export const scheduleLogsDelivery = (bot: any) => {
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
  cron.schedule('0 9 * * *', async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ª–æ–≥–æ–≤
      const { appLogPath, errorLogPath } = getLogFiles();
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const caption = 'üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ª–æ–≥–æ–≤';
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤
      if (errorLogPath) {
        await bot.telegram.sendDocument(
          messages.App.GroupId,
          { source: errorLogPath, filename: path.basename(errorLogPath) },
          { caption: `${caption} - –û—à–∏–±–∫–∏` }
        );
      }
      
      if (appLogPath) {
        await bot.telegram.sendDocument(
          messages.App.GroupId,
          { source: appLogPath, filename: path.basename(appLogPath) },
          { caption: `${caption} - –í—Å–µ –ª–æ–≥–∏` }
        );
      }
      
      console.log('–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (error: any) {
      logErrorWithAutoDetails(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ª–æ–≥–æ–≤: ${error.message}`, 'scheduleLogsDelivery');
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ª–æ–≥–æ–≤:', error);
    }
  }, {
    timezone: 'Europe/Moscow' // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
  });
  
  console.log('–ó–∞–¥–∞—á–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞');
};

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ –≤ –æ–±—â–∏–π —á–∞—Ç
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export const getLogsGroupCommand = async (ctx: Context) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!(await checkAdminRights(ctx))) {
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ
    if (ctx.chat?.id.toString() !== messages.App.GroupId) {
      await ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –æ–±—â–µ–º —á–∞—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ª–æ–≥–æ–≤
    const { appLogPath, errorLogPath } = getLogFiles();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤
    if (errorLogPath) {
      await ctx.replyWithDocument({
        source: errorLogPath,
        filename: path.basename(errorLogPath)
      });
    }
    
    if (appLogPath) {
      await ctx.replyWithDocument({
        source: appLogPath,
        filename: path.basename(appLogPath)
      });
    }
    
    await ctx.reply('–§–∞–π–ª—ã –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.');
  } catch (error: any) {
    logErrorWithAutoDetails(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ: ${error.message}`, 'getLogsGroupCommand');
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤.');
  }
}; 