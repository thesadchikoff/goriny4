import { Context } from 'telegraf';
import { BotContext } from '@/@types/scenes';
import fs from 'fs';
import path from 'path';
import { logErrorWithAutoDetails } from '@/core/logs/log-error-to-file';
import { prisma } from '@/prisma/prisma.client';
import * as cron from 'node-cron';
import messages from '@/config/bot.config.json'

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ logs.txt
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export const getLogsCommand = async (ctx: Context) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const userId = ctx.from?.id.toString();
    
    if (!userId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ isAdmin –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const user = await prisma.user.findFirst({
      where: {
        id: userId,
      },
    });
    
    if (!user || !user.isAdmin) {
      await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
      return;
    }
    
    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
    const logsPath = path.resolve(process.cwd(), 'logs', 'logs.txt');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(logsPath)) {
      await ctx.reply('–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    await ctx.replyWithDocument({
      source: logsPath,
      filename: 'logs.txt'
    });
    
    await ctx.reply('–§–∞–π–ª –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
  } catch (error: any) {
    logErrorWithAutoDetails(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤: ${error.message}`, 'getLogsCommand');
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤.');
  }
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ —á–∞—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
 * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 */
export const scheduleLogsDelivery = (bot: any) => {
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
  cron.schedule('0 9 * * *', async () => {
    try {
      // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
      const logsPath = path.resolve(process.cwd(), 'logs', 'logs.txt');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      if (!fs.existsSync(logsPath)) {
        console.error('–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏');
        return;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
      await bot.telegram.sendDocument(
        messages.App.GroupId, // ID —á–∞—Ç–∞
        { source: logsPath, filename: 'logs.txt' },
        { caption: 'üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ª–æ–≥–æ–≤' }
      );
      
      console.log('–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (error: any) {
      logErrorWithAutoDetails(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ª–æ–≥–æ–≤: ${error.message}`, 'scheduleLogsDelivery');
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ª–æ–≥–æ–≤:', error);
    }
  }, {
    timezone: 'Europe/Moscow' // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
  });
  
  console.log('–ó–∞–¥–∞—á–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞');
};

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ logs.txt –≤ –æ–±—â–∏–π —á–∞—Ç
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export const getLogsGroupCommand = async (ctx: Context) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const userId = ctx.from?.id.toString();
    
    if (!userId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ isAdmin –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const user = await prisma.user.findFirst({
      where: {
        id: userId,
      },
    });
    
    if (!user || !user.isAdmin) {
      await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ
    if (ctx.chat?.id.toString() !== messages.App.GroupId) {
      await ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –æ–±—â–µ–º —á–∞—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
      return;
    }
    
    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
    const logsPath = path.resolve(process.cwd(), 'logs', 'logs.txt');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(logsPath)) {
      await ctx.reply('–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    await ctx.replyWithDocument({
      source: logsPath,
      filename: 'logs.txt'
    });
    
    await ctx.reply('–§–∞–π–ª –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
  } catch (error: any) {
    logErrorWithAutoDetails(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ: ${error.message}`, 'getLogsGroupCommand');
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤.');
  }
}; 