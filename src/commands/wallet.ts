import {Context, Telegraf} from 'telegraf'
import {bot} from '@/config/bot'
import {prisma} from '@/prisma/prisma.client'
import {getWalletBalance} from '@/trust-wallet/get-balance'
import {currencyFormatter} from '@/utils/currency-formatter'
import {walletInlineKeyboard} from '@/keyboards/inline-keyboards/wallet.inline'
import currencyService from '@/service/currency.service'
import frozenBalanceService from '@/service/frozen-balance.service';
import {dateFormat} from '@/utils/format-date' 
import { Stage } from '@/index'

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const walletInfo = () => {
    Stage.command(['wallet', 'balance'], async (ctx) => {
        try {
            const user = await prisma.user.findFirst({
                where: {
                    id: ctx.from.id.toString()
                },
                include: {
                    wallet: true,
                    currency: true
                }
            });

            if (!user || !user.wallet) {
                return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫');
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö
            const frozenInfo = await frozenBalanceService.checkAvailableBalance(
                user.id,
                0 // 0, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            );

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å BTC
            const currency = await currencyService.getCurrency('bitcoin');

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é RUB)
            const userCurrency = user.currency?.value?.toLowerCase() || 'rub';

            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            let message = `üíº <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ</b>\n\n`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            message += `üîë <b>–ê–¥—Ä–µ—Å:</b> <code>${user.wallet.address}</code>\n\n`;
            message += `üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n`;
            message += `‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${frozenInfo.totalBalance.toFixed(8)} BTC`;
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –≤–∞–ª—é—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (currency?.bitcoin) {
                const btcValueInUserCurrency = frozenInfo.totalBalance * currency.bitcoin[userCurrency as 'rub' | 'usd' | 'eur'];
                message += ` (‚âà${currencyFormatter(btcValueInUserCurrency, userCurrency)})\n`;
            } else {
                message += '\n';
            }
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–º–æ—Ä–æ–∑–∫–µ
            message += `‚Ä¢ –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: ${frozenInfo.frozenBalance.toFixed(8)} BTC`;
            if (currency?.bitcoin && frozenInfo.frozenBalance > 0) {
                const frozenValueInUserCurrency = frozenInfo.frozenBalance * currency.bitcoin[userCurrency as 'rub' | 'usd' | 'eur'];
                message += ` (‚âà${currencyFormatter(frozenValueInUserCurrency, userCurrency)})\n`;
            } else {
                message += '\n';
            }
            
            // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
            message += `‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: ${frozenInfo.availableBalance.toFixed(8)} BTC`;
            if (currency?.bitcoin) {
                const availableValueInUserCurrency = frozenInfo.availableBalance * currency.bitcoin[userCurrency as 'rub' | 'usd' | 'eur'];
                message += ` (‚âà${currencyFormatter(availableValueInUserCurrency, userCurrency)})\n`;
            } else {
                message += '\n';
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –æ–±—ä—è—Å–Ω—è–µ–º
            if (frozenInfo.frozenBalance > 0) {
                message += `\nüìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ø—Ä–æ–¥–∞–∂—É BTC. –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.`;
            }
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            message += `\n\nüïí –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${dateFormat(new Date())}`;
            
            return ctx.reply(message, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: walletInlineKeyboard
                }
            });
        } catch (error) {
            console.error('[WALLET] Error fetching wallet info:', error);
            return ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });
}; 