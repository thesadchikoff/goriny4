import { Context } from 'telegraf'
import { prisma } from '../prisma/prisma.client'
import { currencyFormatter } from '../utils/currency-formatter'

interface TransferWithUsers {
	id: string
	fromUserId: string
	toUserId: string
	count: number
	createdAt: Date
	fromUser: {
		username: string
	}
	toUser: {
		username: string
	}
}

export const transferHistory = async (ctx: any) => {
	try {
		const userId = ctx.from?.id.toString()
		if (!userId) {
			await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
			return
		}

		const transfers = await prisma.transfer.findMany({
			where: {
				OR: [
					{ fromUserId: userId },
					{ toUserId: userId }
				]
			},
			include: {
				fromUser: {
					select: {
						username: true
					}
				},
				toUser: {
					select: {
						username: true
					}
				}
			},
			orderBy: {
				createdAt: 'desc'
			},
			take: 10
		})

		if (transfers.length === 0) {
			await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤')
			return
		}

		const formattedTransfers = transfers.map((transfer: TransferWithUsers) => {
			const isOutgoing = transfer.fromUserId === userId
			const otherUser = isOutgoing ? transfer.toUser : transfer.fromUser
			const direction = isOutgoing ? '‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '‚¨ÖÔ∏è –ü–æ–ª—É—á–µ–Ω'
			const amount = currencyFormatter(transfer.count, 'BTC')
			
			return `${direction} –ø–µ—Ä–µ–≤–æ–¥\n` +
				   `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${otherUser.username}\n` +
				   `üí∞ –°—É–º–º–∞: ${amount}\n` +
				   `üìÖ –î–∞—Ç–∞: ${transfer.createdAt.toLocaleString()}\n`
		})

		await ctx.reply(
			'üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤:\n\n' +
			formattedTransfers.join('\n')
		)
	} catch (error) {
		console.error('Error in transferHistory:', error)
		await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤')
	}
}
