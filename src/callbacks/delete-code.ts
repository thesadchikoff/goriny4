import { Context } from 'telegraf'
import { prisma } from '../prisma/prisma.client'

export const deleteCode = async (ctx: any) => {
	try {
		const codeId = parseInt(ctx.match![1])
		
		await prisma.code.delete({
			where: {
				id: codeId
			}
		})

		await ctx.answerCbQuery('‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
		
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
		const codes = await prisma.code.findMany({
			where: {
				creatorId: ctx.from?.id.toString()
			}
		})

		if (codes.length > 0) {
			let codeStroke = ''
			const buttons = codes.map((code, index) => [
				{
					text: `‚ùå –£–¥–∞–ª–∏—Ç—å ${code.code}`,
					callback_data: `delete_code_${code.id}`
				}
			])
			
			codes.forEach((code, index) => {
				codeStroke += `<b>${++index}.</b> <code>${code.code}</code> | ${code.amountCoins} BTC\n`
			})

			buttons.push([{
				text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
				callback_data: 'promo'
			}])

			return ctx.editMessageText(
				`üé´ <b>–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤</b>\n\n${codeStroke}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:`,
				{
					parse_mode: 'HTML',
					reply_markup: {
						inline_keyboard: buttons,
					},
				}
			)
		} else {
			return ctx.editMessageText(`üé´ –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤ –ø—É—Å—Ç`, {
				parse_mode: 'HTML',
				reply_markup: {
					inline_keyboard: [
						[
							{
								callback_data: 'promo',
								text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
							},
						],
					],
				},
			})
		}
	} catch (error) {
		console.log(error)
		await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞')
	}
} 