import { Context, MiddlewareFn } from 'telegraf';
import { logInfo, logError } from '@/core/logs/logger';
import { Update } from 'telegraf/typings/core/types/typegram';

/**
 * Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—à–∏–±–æ–∫
 */
export const loggerMiddleware: MiddlewareFn<Context<Update>> = async (ctx, next) => {
  const startTime = Date.now();
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  const userId = ctx.from?.id;
  const username = ctx.from?.username;
  const firstName = ctx.from?.first_name;
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  let updateType = 'unknown';
  if (ctx.updateType) {
    updateType = ctx.updateType;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ callback
  let content = '';
  if (ctx.message && 'text' in ctx.message) {
    content = ctx.message.text;
  } else if (ctx.callbackQuery) {
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º data –∏–∑ callbackQuery
    const callbackData = (ctx.callbackQuery as any).data;
    content = callbackData ? String(callbackData) : 'callback –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö';
  }

  // –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  const metadata = {
    userId,
    username,
    firstName,
    chatId: ctx.chat?.id,
    chatType: ctx.chat?.type,
    updateType,
    content: content.substring(0, 100) // –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  };

  // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  logInfo(`üì• –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${updateType}`, metadata);

  try {
    // –í—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π middleware
    await next();
    
    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    const responseTime = Date.now() - startTime;
    logInfo(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ ${responseTime}ms`, { 
      ...metadata,
      responseTime
    });
  } catch (error: any) {
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    const responseTime = Date.now() - startTime;
    logError(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${error.message}`, {
      ...metadata,
      responseTime,
      stack: error.stack
    });
    
    // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
    throw error;
  }
}; 