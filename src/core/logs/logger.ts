import winston from 'winston';
import 'winston-daily-rotate-file';
import TelegramTransport from 'winston-telegram';
import path from 'path';
import fs from 'fs';
import { timeFormat } from "@/utils/time-format";

/**
 * –¢–∏–ø —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export type LogLevel = 'debug' | 'info' | 'warn' | 'error' | 'critical';

/**
 * –¢–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Telegram
 */
export interface TelegramContext {
  from?: {
    id?: number;
    username?: string;
    first_name?: string;
  };
  chat?: {
    id?: number;
  };
  message?: {
    text?: string;
  };
}

// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è log —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const logDir = path.resolve(process.cwd(), 'log');
if (!fs.existsSync(logDir)) {
  fs.mkdirSync(logDir, { recursive: true });
}

// –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
const customFormat = winston.format.printf(({ level, message, timestamp, service, ...metadata }) => {
  const metaString = Object.keys(metadata).length 
    ? `\n${JSON.stringify(metadata, null, 2)}` 
    : '';
    
  // –§–æ—Ä–º–∞—Ç –¥–ª—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
  return `[${timestamp}] [${level.toUpperCase()}] [${service}]: ${message}${metaString}`;
});

// –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ —Å —Ü–≤–µ—Ç–∞–º–∏
const consoleFormat = winston.format.combine(
  winston.format.colorize(),
  winston.format.printf(({ level, message, timestamp, service, ...metadata }) => {
    const metaString = Object.keys(metadata).length 
      ? `\n${JSON.stringify(metadata, null, 2)}` 
      : '';
      
    return `üî∂ [${timestamp}] [${level}] [${service}]: ${message}${metaString}`;
  })
);

// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
const fileRotateTransport = new winston.transports.DailyRotateFile({
  filename: path.join(logDir, 'app-%DATE%.log'),
  datePattern: 'YYYY-MM-DD',
  maxSize: '20m',
  maxFiles: '14d',
  format: winston.format.combine(
    // @ts-ignore - –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∏–ø–∞–º–∏, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    winston.format.timestamp({ format: timeFormat }),
    customFormat
  )
});

// –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –æ—à–∏–±–æ–∫
const errorFileRotateTransport = new winston.transports.DailyRotateFile({
  filename: path.join(logDir, 'error-%DATE%.log'),
  datePattern: 'YYYY-MM-DD',
  level: 'error',
  maxSize: '20m',
  maxFiles: '30d',
  format: winston.format.combine(
    // @ts-ignore - –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∏–ø–∞–º–∏, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    winston.format.timestamp({ format: timeFormat }),
    customFormat
  )
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ TELEGRAM_TOKEN –≤ .env
let telegramTransport = null;
if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ID —á–∞—Ç–∞
    const chatId = process.env.TELEGRAM_CHAT_ID;
    if (!chatId || isNaN(Number(chatId))) {
      console.warn('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π TELEGRAM_CHAT_ID, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Telegram –æ—Ç–∫–ª—é—á–µ–Ω–æ');
    } else {
      telegramTransport = new TelegramTransport({
        token: process.env.TELEGRAM_BOT_TOKEN,
        // @ts-ignore - winston-telegram –∏—Å–ø–æ–ª—å–∑—É–µ—Ç string –¥–ª—è chat_id, —Ö–æ—Ç—è –≤ —Ç–∏–ø–∞—Ö —É–∫–∞–∑–∞–Ω–æ number
        chatId: process.env.TELEGRAM_CHAT_ID,
        level: 'error',
        formatMessage: ({ level, message, ...metadata }) => {
          try {
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
            const sanitizedMetadata = Object.keys(metadata).length 
              ? JSON.stringify(metadata, null, 2).substring(0, 500) 
              : '';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö HTML —Ç–µ–≥–æ–≤ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏—Ö
            const escapedMessage = message
              .replace(/</g, '&lt;')
              .replace(/>/g, '&gt;')
              .replace(/&/g, '&amp;');
              
            return `üö® [${level.toUpperCase()}]: ${escapedMessage}\n${sanitizedMetadata ? '–î–µ—Ç–∞–ª–∏: ' + sanitizedMetadata : ''}`;
          } catch (err) {
            return `üö® [${level.toUpperCase()}]: ${message}`;
          }
        },
        handleExceptions: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        handleRejections: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
        parseMode: 'HTML',
        batchingDelay: 1000, // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –≤ 1 —Å–µ–∫—É–Ω–¥—É
        disableNotification: false,
        timeout: 10000, // –¢–∞–π–º–∞—É—Ç –≤ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Telegram
        retryCount: 3 // –ü–æ–ø—ã—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
      telegramTransport.on('error', (error) => {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error.message);
        // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç—É –æ—à–∏–±–∫—É –≤ Winston, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∞
      });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:', err);
    telegramTransport = null;
  }
}

// –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
const logger = winston.createLogger({
  level: process.env.NODE_ENV === 'production' ? 'info' : 'debug',
  defaultMeta: { service: 'p2p-telegram-bot' },
  transports: [
    new winston.transports.Console({
      format: winston.format.combine(
        // @ts-ignore - –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∏–ø–∞–º–∏, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        winston.format.timestamp({ format: timeFormat }),
        consoleFormat
      ),
      handleExceptions: true
    }),
    fileRotateTransport,
    errorFileRotateTransport
  ],
  exitOnError: false // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
});

// –î–æ–±–∞–≤–ª—è–µ–º Telegram —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
if (telegramTransport) {
  logger.add(telegramTransport);
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º
 * 
 * @param level –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ('info', 'warn', 'error', 'debug', 'verbose')
 * @param message –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param metadata –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
 */
export function log(level: string, message: string, metadata: any = {}) {
  logger.log(level, message, metadata);
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 * 
 * @param message –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param metadata –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
 */
export function logInfo(message: string, metadata: any = {}) {
  logger.info(message, metadata);
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
 * 
 * @param message –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param metadata –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
 */
export function logWarn(message: string, metadata: any = {}) {
  logger.warn(message, metadata);
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É
 * 
 * @param message –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @param metadata –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
 */
export function logError(message: string, metadata: any = {}) {
  logger.error(message, metadata);
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 * 
 * @param message –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param metadata –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
 */
export function logDebug(message: string, metadata: any = {}) {
  logger.debug(message, metadata);
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–æ–∫–µ –∫–æ–¥–∞ –∏–∑ —Å—Ç–µ–∫–∞ –≤—ã–∑–æ–≤–æ–≤
 * @param stack –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤
 * @returns –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ, —Å—Ç—Ä–æ–∫–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏
 */
function extractStackInfo(stack: string | undefined, functionName?: string): { 
  file: string;
  line: number | null;
  column: number | null;
  extractedFunctionName: string;
} {
  try {
    let file = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª';
    let line = null;
    let column = null;
    let extractedFunctionName = functionName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è';

    if (!stack) {
      return { file, line, column, extractedFunctionName };
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    const lines = stack.split('\n');
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é
    const skipFiles = [
      'logger.ts', 
      'log-error-to-file.ts'
    ];
    
    // –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å—Ç–µ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é
    for (let i = 0; i < lines.length; i++) {
      const stackLine = lines[i]?.trim();
      if (!stackLine) continue;
      
      // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å—Ç–µ–∫–∞
      // –§–æ—Ä–º–∞—Ç: at [—Ñ—É–Ω–∫—Ü–∏—è] ([—Ñ–∞–π–ª]:[—Å—Ç—Ä–æ–∫–∞]:[–∫–æ–ª–æ–Ω–∫–∞])
      // –∏–ª–∏:    at [—Ñ–∞–π–ª]:[—Å—Ç—Ä–æ–∫–∞]:[–∫–æ–ª–æ–Ω–∫–∞]
      const match = stackLine.match(/at (?:(.+) \()?(.+):(\d+):(\d+)\)?/);
      
      if (match) {
        try {
          const func = match[1] || '–ê–Ω–æ–Ω–∏–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è';
          const filePath = match[2] || '';
          const fileName = filePath?.split('/').pop() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª';
          
          // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
          if (skipFiles.some(skipFile => fileName.includes(skipFile))) {
            continue;
          }
          
          extractedFunctionName = functionName || func;
          file = fileName;
          line = match[3] ? parseInt(match[3], 10) : null;
          column = match[4] ? parseInt(match[4], 10) : null;
          break;
        } catch (extractError) {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–π
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–µ–∫–∞:', extractError);
          continue;
        }
      }
    }

    return { file, line, column, extractedFunctionName };
  } catch (error) {
    // –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–µ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å—Ç–µ–∫–∞:', error);
    return {
      file: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç–µ–∫–∞',
      line: null,
      column: null,
      extractedFunctionName: functionName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è'
    };
  }
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * 
 * @param errorMessage –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @param functionName –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏, –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
 */
export function logErrorWithAutoDetails(errorMessage: string, functionName?: string) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤
    const stack = new Error().stack;
    const { file, line, column, extractedFunctionName } = extractStackInfo(stack, functionName);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const metadata: Record<string, any> = {
      function: extractedFunctionName,
      file
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–æ–∫–µ –∏ –∫–æ–ª–æ–Ω–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (line !== null) {
      metadata.line = line;
    }
    
    if (column !== null) {
      metadata.column = column;
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–æ –≤—Å–µ–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
    logError(errorMessage, metadata);
  } catch (loggingError) {
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥
    try {
      console.error('–û–®–ò–ë–ö–ê –ü–†–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–ò:', errorMessage);
      console.error('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', loggingError);
    } catch (criticalError) {
      // –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç—á–∞—è–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
      console.error('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø');
    }
  }
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
 * @param message –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @param stack –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤
 * @param level –£—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–∫–∏
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
 */
export function logErrorToFile(message: string, stack?: string, level: LogLevel = 'error', ctx?: TelegramContext) {
  try {
    if (!message) {
      console.warn('–ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
      return;
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å—Ç–µ–∫–∞ –≤—ã–∑–æ–≤–æ–≤
    const { file, line, column, extractedFunctionName } = extractStackInfo(stack);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    let logText = `[${new Date().toISOString()}] [${level.toUpperCase()}] `;
    logText += `[${file}${line ? `:${line}` : ''}] `;
    logText += `[${extractedFunctionName}] `;
    logText += message;

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if (ctx) {
      try {
        const userId = ctx.from?.id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        const username = ctx.from?.username ? `@${ctx.from.username}` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
        const name = ctx.from?.first_name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        
        logText += `\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID=${userId}, Username=${username}, Name=${name}`;
      } catch (ctxError: unknown) {
        const errorMessage = ctxError instanceof Error ? ctxError.message : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        logText += `\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: ${errorMessage}`;
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (stack) {
      logText += `\n–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:\n${stack}`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    logText += '\n\n';

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    const logFile = getLogFilePath(level);
    fs.appendFileSync(logFile, logText, { encoding: 'utf8' });
    
    // –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –¥—É–±–ª–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    if (level === 'critical') {
      console.error(`–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${message}`);
    }
  } catch (loggingError: unknown) {
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å
    const errorMessage = loggingError instanceof Error ? loggingError.message : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ —Ñ–∞–π–ª:', errorMessage);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–≤–µ—Å—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try {
      console.error('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', message);
    } catch (consoleError) {
      // –ï—Å–ª–∏ –¥–∞–∂–µ —ç—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
  }
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –æ—à–∏–±–∫–∏
 * @param level –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
 */
function getLogFilePath(level: LogLevel): string {
  const logDir = path.resolve(process.cwd(), 'log');
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!fs.existsSync(logDir)) {
    fs.mkdirSync(logDir, { recursive: true });
  }
  
  const date = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
  
  switch(level) {
    case 'critical':
      return path.join(logDir, `critical-${date}.log`);
    case 'error':
      return path.join(logDir, `error-${date}.log`);
    case 'warn':
      return path.join(logDir, `warn-${date}.log`);
    case 'info':
      return path.join(logDir, `info-${date}.log`);
    case 'debug':
      return path.join(logDir, `debug-${date}.log`);
    default:
      return path.join(logDir, `app-${date}.log`);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export default logger; 