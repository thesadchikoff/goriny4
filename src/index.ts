import {startCommand} from '@/commands/start.command'
import {session} from 'telegraf'
import {callbackHandler} from './callback-queries/callback-handler'
import {bot} from './config/bot'
import {attachmentActions} from './init-bot/attachment-actions'
import {attachmentCommands} from './init-bot/attachment-commands'
import {attachmentDataBase} from './init-bot/attachment-database'
import {attachmentScenes} from './init-bot/attachment-scenes'
import {prisma} from './prisma/prisma.client'
import {checkBlockMiddleware} from "@/middlewares/check-block.middleware";
import { createBitcoinWallet } from "@/trust-wallet/bitcoin-wallet";
import { BitcoinNetwork } from "@/trust-wallet/bitcoin-balance";
import { scheduleLogsDelivery, scheduleLogsCleanup } from '@/commands/get-logs.command';
import { EditContractDescription } from './scenes/edit-contract-description'
import { ADMIN_ID, initAdmin } from './utils/admin-id.utils';
import { Context } from 'telegraf';
import { loggerMiddleware } from '@/middlewares/logger.middleware';
import { logInfo, logError, logDebug, logErrorWithAutoDetails } from '@/core/logs/logger';
import { BotContext } from '@/@types/scenes';
import { startbotCommand } from '@/commands/startbot.command'
import { startCommandMiddleware } from '@/middlewares/start-command.middleware'
import { logsAccessMiddleware } from '@/middlewares/logs-access.middleware';

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞–¥–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
process.on('uncaughtException', (error: Error) => {
	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ Telegram
		const errorMessage = error.message || '';
		const isTelegramError = errorMessage.includes('Bad Request') || 
			errorMessage.includes('chat not found') || 
			errorMessage.includes("can't parse entities") ||
			errorMessage.includes('Telegram');
		
		// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ –ª–æ–≥–≥–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º logErrorWithAutoDetails
		if (!isTelegramError) {
			logErrorWithAutoDetails(`–ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${errorMessage}`);
		}
		
		console.error('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê (–ü–ï–†–ï–•–í–ê–ß–ï–ù–ê):', error);
		
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-—Ç–µ–ª–µ–≥—Ä–∞–º –æ—à–∏–±–æ–∫
		if (!isTelegramError) {
			bot.telegram.sendMessage(
				ADMIN_ID,
				`üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê!\n\n${errorMessage}\n\n–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞, –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É.`
			).catch(err => {
				console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É:', err);
			});
		}
	} catch (handlerError) {
		console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π:', handlerError);
	}
});

process.on('unhandledRejection', (reason: any, promise: Promise<any>) => {
	try {
		const errorMessage = reason instanceof Error ? reason.message : String(reason);
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ Telegram
		const isTelegramError = errorMessage.includes('Bad Request') || 
			errorMessage.includes('chat not found') || 
			errorMessage.includes("can't parse entities") ||
			errorMessage.includes('Telegram');
		
		// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ –ª–æ–≥–≥–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º logErrorWithAutoDetails
		if (!isTelegramError) {
			logErrorWithAutoDetails(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ–±–µ—â–∞–Ω–∏–µ: ${errorMessage}`);
		}
		
		console.error('–ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–û–ï –û–ë–ï–©–ê–ù–ò–ï (–ü–ï–†–ï–•–í–ê–ß–ï–ù–û):', reason);
		
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-—Ç–µ–ª–µ–≥—Ä–∞–º –æ—à–∏–±–æ–∫
		if (!isTelegramError) {
			bot.telegram.sendMessage(
				ADMIN_ID,
				`‚ö†Ô∏è –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–û–ï –û–ë–ï–©–ê–ù–ò–ï!\n\n${errorMessage}\n\n–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞, –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É.`
			).catch(err => {
				console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É:', err);
			});
		}
	} catch (handlerError) {
		console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±–µ—â–∞–Ω–∏–π:', handlerError);
	}
});

const initConfig = async () => {
	const config = await prisma.config.findFirst()
	if (!config) {
		const adminWallet = createBitcoinWallet(BitcoinNetwork.MAINNET)

		await prisma.config.create({
			data: {
				botName: 'Goryny4Bit',
				feeForTransaction: 0,
				adminWalletAddress: adminWallet.address,
				adminWalletWIF: adminWallet.wif
			},
		})
		logInfo('–°–æ–∑–¥–∞–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞', { newConfig: true });
		return
	}
	logDebug('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', { configExists: true });
	return
}

export const Stage = attachmentScenes()
// Stage.command('start', startCommand)
bot.use(checkBlockMiddleware)
bot.use(session())
// –î–æ–±–∞–≤–ª—è–µ–º middleware –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot.use(loggerMiddleware)

// –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start –≤ —Å—Ü–µ–Ω–∞—Ö
bot.use(startCommandMiddleware())

// –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–≥–∞–º
// bot.use(logsAccessMiddleware())

// @ts-ignore
bot.use(Stage)

bot.telegram.setMyCommands([
	{
		command: '/start',
		description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞',
	},
	{
		command: '/wallet',
		description: '–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞',
	},
	{
		command: '/balance',
		description: '–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)',
	},
	{
		command: '/version',
		description: '–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞',
	},
])

attachmentDataBase()
attachmentCommands()
attachmentActions()

// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤
scheduleLogsDelivery(bot);

// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
scheduleLogsCleanup();

callbackHandler()
initConfig()

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
Stage.register(EditContractDescription)

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.launch().then(async () => {
	// –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	const telegramLoggingEnabled = !!(process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID);
	logInfo('–°—Ç–∞—Ç—É—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è', {
		telegramLoggingEnabled,
		fileLoggingEnabled: true,
		startTime: new Date().toISOString(),
		adminId: ADMIN_ID,
		nodeEnv: process.env.NODE_ENV || 'development'
	});
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
	await bot.telegram.sendMessage(
		ADMIN_ID,
		'ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!'
	);
	logInfo('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω', {
		startTime: new Date().toISOString(),
		adminId: ADMIN_ID,
		nodeEnv: process.env.NODE_ENV || 'development'
	});
}).catch((error: Error) => {
	logError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞', { error: error.message, stack: error.stack });
	console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ Telegraf
bot.catch(error => {
	console.error('TELEGRAF ERROR', error)
})

