import { bot } from '@/config/bot';
import { prisma } from '@/prisma/prisma.client';
import currencyService from '@/service/currency.service';
import { config } from '@/config/service.config';
import cron from 'node-cron';
import { logInfo, logError, logDebug } from '@/core/logs/logger';
import axios from 'axios';
import { url } from '@/config/api';

// –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API CoinGecko
axios.get(url + '?ids=bitcoin&vs_currencies=usd')
  .then(response => {
    console.log('üü¢ API CoinGecko –¥–æ—Å—Ç—É–ø–µ–Ω:', response.data);
  })
  .catch(error => {
    console.error('üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API CoinGecko:', error.message);
  });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª—É–∂–±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const NOTIFICATION_CONFIG = {
  // –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  CHANGE_THRESHOLD: 0.0005, // 0.5% - –±–æ–ª–µ–µ —Ä–∞–∑—É–º–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ cron (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã API)
  CHECK_INTERVAL: '*/30 * * * *',
  // –í–∞–ª—é—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ BTC
  CURRENCY: 'usd' as const,
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
  MIN_NOTIFICATION_INTERVAL: 15,
  // –°—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
  MAX_RETRY_COUNT: 3,
  // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  RETRY_DELAY: 2000
};

// –ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å BTC
let lastBTCRate: number | null = null;
// –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
let lastNotificationTime: Date | null = null;

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å BTC —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
 */
async function getBTCRateWithRetry(): Promise<number | null> {
  let retryCount = 0;
  
  while (retryCount < NOTIFICATION_CONFIG.MAX_RETRY_COUNT) {
    try {
      const rate = await currencyService.getCurrentBTCRate(NOTIFICATION_CONFIG.CURRENCY);
      return rate;
    } catch (error) {
      retryCount++;
      const isRateLimitError = error instanceof Error && 
        (error.message.includes('429') || error.message.includes('rate limit'));
      
      if (isRateLimitError) {
        logError(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API CoinGecko (429). –ü–æ–ø—ã—Ç–∫–∞ ${retryCount}/${NOTIFICATION_CONFIG.MAX_RETRY_COUNT}`);
      } else {
        logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ BTC: ${(error as Error).message}. –ü–æ–ø—ã—Ç–∫–∞ ${retryCount}/${NOTIFICATION_CONFIG.MAX_RETRY_COUNT}`);
      }
      
      if (retryCount >= NOTIFICATION_CONFIG.MAX_RETRY_COUNT) {
        return null;
      }
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, NOTIFICATION_CONFIG.RETRY_DELAY));
    }
  }
  
  return null;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ BTC
 */
export async function notifyBTCRateChanges() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å BTC –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    const currentRate = await getBTCRateWithRetry();
    
    // –ï—Å–ª–∏ –∫—É—Ä—Å –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    if (currentRate === null) {
      logError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å BTC –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫');
      return;
    }
    
    logDebug(`–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å BTC: $${currentRate.toFixed(2)}`);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ (lastBTCRate === null), –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
    if (lastBTCRate === null) {
      lastBTCRate = currentRate;
      logInfo(`–ù–∞—á–∞–ª—å–Ω—ã–π –∫—É—Ä—Å BTC: $${currentRate.toFixed(2)}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      const subscriberCount = await prisma.user.count({
        where: {
          isBtcSubscribed: true,
          isBlocked: false
        }
      });
      logInfo(`–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É—Ä—Å–µ BTC: ${subscriberCount}`);
      
      return;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const changePercent = ((currentRate - lastBTCRate) / lastBTCRate) * 100;
    logDebug(`–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ BTC: ${changePercent.toFixed(4)}% (–ø—Ä–µ–¥—ã–¥—É—â–∏–π: $${lastBTCRate.toFixed(2)}, —Ç–µ–∫—É—â–∏–π: $${currentRate.toFixed(2)})`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const now = new Date();
    if (lastNotificationTime !== null) {
      const minutesSinceLastNotification = (now.getTime() - lastNotificationTime.getTime()) / (1000 * 60);
      
      if (minutesSinceLastNotification < NOTIFICATION_CONFIG.MIN_NOTIFICATION_INTERVAL) {
        logDebug(`–°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü—Ä–æ—à–ª–æ ${minutesSinceLastNotification.toFixed(1)} –º–∏–Ω. –∏–∑ ${NOTIFICATION_CONFIG.MIN_NOTIFICATION_INTERVAL} –º–∏–Ω.`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å
        lastBTCRate = currentRate;
        return;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –∫—É—Ä—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (Math.abs(changePercent) < NOTIFICATION_CONFIG.CHANGE_THRESHOLD) {
      logDebug(`–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ BTC (${changePercent.toFixed(4)}%) –º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (${NOTIFICATION_CONFIG.CHANGE_THRESHOLD}%)`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å
      lastBTCRate = currentRate;
      return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–∞—Å—Ç–µ—Ç –∏–ª–∏ –ø–∞–¥–∞–µ—Ç –∫—É—Ä—Å
    const trend = changePercent > 0 ? 'üìà —Ä–∞—Å—Ç–µ—Ç' : 'üìâ –ø–∞–¥–∞–µ—Ç';
    const emoji = changePercent > 0 ? 'üü¢' : 'üî¥';
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const subscribedUsers = await prisma.user.findMany({
      where: {
        isBtcSubscribed: true,
        isBlocked: false
      },
      select: {
        id: true,
        username: true
      }
    });
    
    logInfo(`–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ${subscribedUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ BTC (${changePercent.toFixed(4)}%)`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    let sentCount = 0;
    let errorCount = 0;
    
    for (const user of subscribedUsers) {
      try {
        await bot.telegram.sendMessage(
          user.id,
          `${emoji} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ BTC</b>\n\n` +
          `–ö—É—Ä—Å BTC ${trend} –∏ —Å–µ–π—á–∞—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>$${currentRate.toFixed(2)}</b>\n` +
          `–ò–∑–º–µ–Ω–µ–Ω–∏–µ: <b>${changePercent > 0 ? '+' : ''}${changePercent.toFixed(2)}%</b>\n\n` +
          `–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∫—É—Ä—Å: <b>$${lastBTCRate.toFixed(2)}</b>`,
          {
            parse_mode: 'HTML'
          }
        );
        sentCount++;
      } catch (error) {
        errorCount++;
        logError(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id} (${user.username || '–±–µ–∑ –∏–º–µ–Ω–∏'}): ${(error as Error).message}`);
      }
    }
    
    logInfo(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: ${sentCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} —Å –æ—à–∏–±–∫–∞–º–∏`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å
    lastBTCRate = currentRate;
    lastNotificationTime = now;
    
  } catch (error) {
    logError(`–û—à–∏–±–∫–∞ –≤ —Å–ª—É–∂–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫—É—Ä—Å–µ BTC: ${(error as Error).message}`);
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ BTC
 */
export function startBTCRateNotifier() {
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–ª—É–∂–±—ã
  sendTestBTCNotification();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
  const job = cron.schedule(NOTIFICATION_CONFIG.CHECK_INTERVAL, async () => {
    logDebug('[BTC_RATE_NOTIFIER] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫—É—Ä—Å–∞ BTC...');
    await notifyBTCRateChanges();
  });
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
  job.start();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–∞–∑—É
  notifyBTCRateChanges();
  
  logInfo(`[BTC_RATE_NOTIFIER] –°–ª—É–∂–±–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫—É—Ä—Å–µ BTC –∑–∞–ø—É—â–µ–Ω–∞. –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${NOTIFICATION_CONFIG.CHECK_INTERVAL}, –ø–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${NOTIFICATION_CONFIG.CHANGE_THRESHOLD}%`);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–ª—É–∂–±—ã
 */
async function sendTestBTCNotification() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å BTC
    const currentRate = await currencyService.getCurrentBTCRate('usd');
    if (currentRate === null) {
      logError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å BTC –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const admins = await prisma.user.findMany({
      where: {
        isAdmin: true,
        isBlocked: false
      },
      select: {
        id: true,
        username: true
      }
    });
    
    logInfo(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${admins.length} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    for (const admin of admins) {
      try {
        await bot.telegram.sendMessage(
          admin.id,
          `üîî <b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É–∂–±—ã –∫—É—Ä—Å–∞ BTC</b>\n\n` +
          `–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å BTC: <b>$${currentRate.toFixed(2)}</b>\n\n` +
          `–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ —Å–ª—É–∂–±–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ BTC —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n` +
          `–ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ <b>${NOTIFICATION_CONFIG.CHANGE_THRESHOLD}%</b>.\n` +
          `–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>${NOTIFICATION_CONFIG.CHECK_INTERVAL}</b>`,
          {
            parse_mode: 'HTML'
          }
        );
        logInfo(`–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${admin.id} (${admin.username || '–±–µ–∑ –∏–º–µ–Ω–∏'})`);
      } catch (error) {
        logError(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${admin.id}: ${(error as Error).message}`);
      }
    }
  } catch (error) {
    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${(error as Error).message}`);
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ API –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 
 * –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è cron –∑–∞–¥–∞—á–∏
 */
async function testBTCRateNotifier() {
  try {
    console.log('‚è±Ô∏è –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –Ω–∞–ø—Ä—è–º—É—é, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è —Å–µ—Ä–≤–∏—Å
    const response = await axios.get(url + '?ids=bitcoin&vs_currencies=usd');
    console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç API:', response.data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    const responseData = response.data as any;
    if (!responseData || 
        typeof responseData !== 'object' || 
        !responseData.bitcoin || 
        typeof responseData.bitcoin.usd !== 'number') {
      console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API:', responseData);
      return;
    }
    
    // –Ø–≤–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
    const data = response.data as { bitcoin: { usd: number } };
    const currentRate = data.bitcoin.usd;
    console.log(`üí∞ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å BTC: $${currentRate}`);
    
    if (!currentRate) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å BTC –Ω–∞–ø—Ä—è–º—É—é');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const admins = await prisma.user.findMany({
      where: { isAdmin: true },
      select: { id: true, username: true }
    });
    
    console.log(`üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`, admins);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω—É
    for (const admin of admins) {
      try {
        await bot.telegram.sendMessage(
          admin.id,
          `üß™ <b>–¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)</b>\n\n` +
          `–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å BTC: <b>$${currentRate}</b>\n\n` +
          `–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é –≤ ${new Date().toLocaleTimeString()} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.`,
          { parse_mode: 'HTML' }
        );
        console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${admin.id} (${admin.username || '–±–µ–∑ –∏–º–µ–Ω–∏'})`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${admin.id}:`, error);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è cron
// console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
// testBTCRateNotifier(); 