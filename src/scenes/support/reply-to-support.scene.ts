import { BotContext } from '@/@types/scenes'
import { prisma } from '@/prisma/prisma.client'
import adminNotifyModule from '@/core/admin/admin-notify.module'
import { Scenes } from 'telegraf'

// –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç
export const replyToSupportScene = new Scenes.WizardScene<BotContext>(
	'reply-to-support',
	// –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
	async (ctx) => {
		try {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å id —Ç–∏–∫–µ—Ç–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
			const ticketId = ctx.session?.ticketReply?.ticketId
			
			if (!ticketId) {
				await ctx.reply('‚ùå –û—à–∏–±–∫–∞: ID —Ç–∏–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return ctx.wizard.selectStep(1) // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —à–∞–≥—É –¥–ª—è –≤—ã—Ö–æ–¥–∞
			}

			// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
			const ticket = await prisma.ticket.findFirst({
				where: { id: ticketId },
				include: {
					initiator: true,
					performer: true
				}
			})
			
			if (!ticket) {
				await ctx.reply('‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return ctx.wizard.selectStep(1) // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —à–∞–≥—É –¥–ª—è –≤—ã—Ö–æ–¥–∞
			}
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º —Ç–∏–∫–µ—Ç–∞
			if (ticket.initiatorId !== ctx.from!.id.toString()) {
				await ctx.reply('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ç')
				return ctx.wizard.selectStep(1) // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —à–∞–≥—É –¥–ª—è –≤—ã—Ö–æ–¥–∞
			}
			
			await ctx.reply(
				`<b>üí¨ –û—Ç–≤–µ—Ç –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n`+
				`–¢–∏–∫–µ—Ç #${ticket.id}\n`+
				`<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:</b>\n${ticket.ticketMessage}\n\n`+
				`–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:`,
				{
					parse_mode: 'HTML'
				}
			)
			
			return ctx.wizard.next()
		} catch (error) {
			console.error('[REPLY_TO_SUPPORT] Error in step 1:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞')
			return ctx.wizard.selectStep(1) // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —à–∞–≥—É –¥–ª—è –≤—ã—Ö–æ–¥–∞
		}
	},
	
	// –®–∞–≥ 2: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	async (ctx) => {
		try {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			if (!ctx.message || !('text' in ctx.message)) {
				await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
				return
			}
			
			const replyText = ctx.message.text
			const ticketId = ctx.session?.ticketReply?.ticketId
			
			if (!ticketId) {
				await ctx.reply('‚ùå –û—à–∏–±–∫–∞: ID —Ç–∏–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return ctx.wizard.selectStep(1) // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —à–∞–≥—É –¥–ª—è –≤—ã—Ö–æ–¥–∞
			}
			
			// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
			const ticket = await prisma.ticket.findFirst({
				where: { id: ticketId },
				include: {
					initiator: true,
					performer: true
				}
			})
			
			if (!ticket) {
				await ctx.reply('‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return ctx.wizard.selectStep(1) // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —à–∞–≥—É –¥–ª—è –≤—ã—Ö–æ–¥–∞
			}
			
			// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–∏–∫–µ—Ç–∞
			await prisma.ticketMessage.create({
				data: {
					ticketId: ticket.id,
					senderId: ctx.from!.id.toString(),
					message: replyText,
					isFromSupport: false
				}
			})
			
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
			if (ticket.performerId) {
				await ctx.telegram.sendMessage(
					ticket.performerId,
					`<b>üì© –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–∏–∫–µ—Ç—É #${ticket.id}</b>\n\n`+
					`–û—Ç: @${ticket.initiator.username}\n\n`+
					`<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n${replyText}`,
					{
						parse_mode: 'HTML',
						reply_markup: {
							inline_keyboard: [
								[
									{
										callback_data: `answer-ticket-${ticket.id}`,
										text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å'
									}
								]
							]
						}
					}
				)
			} else {
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
				adminNotifyModule.sendNotify(
					`<b>üì© –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–∏–∫–µ—Ç—É #${ticket.id}</b>\n\n`+
					`–û—Ç: @${ticket.initiator.username} <b>[ID: ${ticket.initiator.id}]</b>\n\n`+
					`<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n${replyText}`
				)
			}
			
			await ctx.reply(
				`‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n`+
				`–ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è`
			)
			
			// –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
			if (ctx.session?.ticketReply) {
				delete ctx.session.ticketReply
			}
			
			return ctx.scene.leave()
		} catch (error) {
			console.error('[REPLY_TO_SUPPORT] Error in step 2:', error)
			await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞')
			return ctx.scene.leave()
		}
	}
)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
replyToSupportScene.command('cancel', async (ctx) => {
	try {
		if (ctx.session?.ticketReply) {
			delete ctx.session.ticketReply
		}
		await ctx.reply('‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
		return ctx.scene.leave()
	} catch (error) {
		console.error('[REPLY_TO_SUPPORT] Error in cancel command:', error)
		await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ')
		return ctx.scene.leave()
	}
}) 