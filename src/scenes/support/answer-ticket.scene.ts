import { BotContext } from '@/@types/scenes'
import { prisma } from '@/prisma/prisma.client'
import { getTicketStatus } from '@/utils/get-ticket-status'
import { Scenes } from 'telegraf'
import { pinnedTicketInlineKeyboard } from '@/keyboards/inline-keyboards/support/pinned-ticket.inline'
import { closeTicketInlineKeyboard } from '@/keyboards/inline-keyboards/support/close-ticket.inline'
import { QueryTriggers } from '@/constants/query-triggers'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ü–µ–Ω—ã –∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–≤–µ—Ç–∞
const sendAnswer = async (ctx: BotContext) => {
	// –ü–æ–ª—É—á–∞–µ–º ID —Ç–∏–∫–µ—Ç–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
	const ticketId = ctx.session.ticketId
	
	if (!ticketId) {
		await ctx.reply('‚ùå –û—à–∏–±–∫–∞: ID —Ç–∏–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω')
		return ctx.scene.leave()
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
	const ticket = await prisma.ticket.findFirst({
		where: { id: ticketId },
		include: {
			initiator: true,
			performer: true,
		},
	})
	
	if (!ticket) {
		await ctx.reply('‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
		return ctx.scene.leave()
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º —Ç–∏–∫–µ—Ç–∞
	if (ticket.performerId !== ctx.from!.id.toString()) {
		await ctx.reply('‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞')
		return ctx.scene.leave()
	}
	
	await ctx.reply(
		`<b>üí¨ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${ticket.initiator.username}</b>\n\n`+
		`–¢–∏–∫–µ—Ç #${ticket.id}\n`+
		`<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:</b>\n${ticket.ticketMessage}\n\n`+
		`–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å:`,
		{
			parse_mode: 'HTML',
		}
	)
	
	return ctx.wizard.next()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const processAnswer = async (ctx: BotContext) => {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
	const answerText = ctx.message.text
	
	// –ü–æ–ª—É—á–∞–µ–º ID —Ç–∏–∫–µ—Ç–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
	const ticketId = ctx.session.ticketId
	
	if (!ticketId) {
		await ctx.reply('‚ùå –û—à–∏–±–∫–∞: ID —Ç–∏–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω')
		return ctx.scene.leave()
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
	const ticket = await prisma.ticket.findFirst({
		where: { id: ticketId },
		include: {
			initiator: true,
			performer: true,
		},
	})
	
	if (!ticket) {
		await ctx.reply('‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
		return ctx.scene.leave()
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	await ctx.telegram.sendMessage(
		ticket.initiator.id,
		`<b>üì© –û—Ç–≤–µ—Ç –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ —Ç–∏–∫–µ—Ç—É #${ticket.id}</b>\n\n${answerText}`,
		{
			parse_mode: 'HTML',
			reply_markup: {
				inline_keyboard: [
					[
						{
							callback_data: QueryTriggers.REPLY_TICKET(ticket.id),
							text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å'
						}
					]
				]
			}
		}
	)
	
	// –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
	await ctx.reply(
		`‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${ticket.initiator.username}`,
		{
			reply_markup: {
				inline_keyboard: closeTicketInlineKeyboard(ticketId)
			}
		}
	)
	
	// –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω—É
	delete ctx.session.ticketId
	return ctx.scene.leave()
}

// –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç
export const answerTicketScene = new Scenes.WizardScene<BotContext>(
	'answer-ticket',
	sendAnswer,
	processAnswer
)

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã
answerTicketScene.command('cancel', async (ctx) => {
	delete ctx.session.ticketId
	await ctx.reply('‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
	return ctx.scene.leave()
}) 