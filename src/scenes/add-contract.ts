import {Scenes} from 'telegraf'
import {WizardContext} from 'telegraf/typings/scenes'
import {currencies} from '../keyboards/inline-keyboards/currencies.inline'
import {prisma} from '../prisma/prisma.client'
import currencyService from '../service/currency.service'
import {currencyFormatter} from '../utils/currency-formatter'
import userService from "@/db/user.service";
import {paymentMethodsForContract, SUPPORTED_CURRENCIES} from "@/keyboards/inline-keyboards/payment-methods-for-contract.inline";
import { CallbackQuery } from 'telegraf/typings/core/types/typegram';
import { BotContext } from '@/@types/scenes';
import frozenBalanceService from '@/service/frozen-balance.service';

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø WizardContext –¥–ª—è –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ —Å—Ü–µ–Ω–∞—Ö
type AddContractContext = {
	session: {
		createContract: {
			currentPaymentMethodId: string
			currentCurrency: string
			pricePerCoin: number
			currentRequisite: any
		}
		actionType: string
		currentCurrency: string
		pricePerCoin: number
		currentRequisite: any
	}
	scene: {
		session: {
			minPrice: number
			maxPrice: number
		}
		leave: () => Promise<void>
	}
	from: {
		id: number
	}
	callbackQuery: CallbackQuery.DataQuery
	text: string
	reply: (text: string, options?: any) => Promise<any>
	editMessageText: (text: string, options?: any) => Promise<any>
	wizard: {
		next: () => void
	}
}

const useCurrentPaymentMethod = (ctx: AddContractContext) => {
	let currentPaymentMethodId = ctx.session.createContract.currentPaymentMethodId || ''

	const setPaymentMethod = (id: string) => {
		currentPaymentMethodId = id
		ctx.session.createContract.currentPaymentMethodId = id
		console.log('Setting payment method ID:', id)
		console.log('After setting, current ID:', currentPaymentMethodId)
	}

	return {
		currentPaymentMethodId,
		setPaymentMethod
	}
}

const selectAction = async (ctx: AddContractContext) => {
	try {
		ctx.session.createContract = {
			currentPaymentMethodId: '',
			currentCurrency: '',
			pricePerCoin: 0,
			currentRequisite: null
		}
		await ctx.editMessageText(`–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –∏–ª–∏ –∫—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É?`, {
			parse_mode: 'HTML',
			reply_markup: {
				inline_keyboard: [
					[
						{
							callback_data: JSON.stringify({
								type: 'sell',
							}),
							text: 'üìà –•–æ—á—É –ø—Ä–æ–¥–∞—Ç—å',
						},
						{
							callback_data: JSON.stringify({
								type: 'buy',
							}),
							text: 'üìà –•–æ—á—É –∫—É–ø–∏—Ç—å',
						},
					],
				],
			},
		})
		return ctx.wizard.next()
	} catch (error) {
		await ctx.reply('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö')
	}
	return ctx.wizard.next()
}

const selectCurrency = async (ctx: AddContractContext) => {
	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /start
		if (ctx.text === '/start') {
			await ctx.reply('–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
			return ctx.scene.leave();
		}
		
		// @ts-ignore
		console.log(ctx.callbackQuery)
		// @ts-ignore
		const actionType = JSON.parse(ctx.callbackQuery.data)
		// @ts-ignore
		ctx.session.actionType = actionType.type
		const buttons = await currencies(false)
		// @ts-ignore
		console.log(ctx.session.actionType)
		if (actionType.type === 'sell') {
			try {
				await ctx.editMessageText(`–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏`, {
					parse_mode: 'HTML',
					reply_markup: {
						inline_keyboard: [...buttons],
					},
				})
				return ctx.wizard.next()
			} catch (error) {
				await ctx.reply('Error')
				return ctx.scene.leave()
			}
		}
		if (actionType.type === 'buy') {
			ctx.editMessageText(`–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏`, {
				parse_mode: 'HTML',
				reply_markup: {
					inline_keyboard: [...buttons],
				},
			})
			return ctx.wizard.next()
		}
		// @ts-ignore
		ctx.session.recipientAddress = ctx.text
	} catch (error) {
		console.log(error)
		return ctx.reply('ü§¨ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞', {
			reply_markup: {
				inline_keyboard: [
					[
						{
							callback_data: 'main_menu',
							text: '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
						},
					],
				],
			},
		})
	}
}

const chooseCountBTC = async (ctx: AddContractContext) => {
	try {
		// @ts-ignore
		const currentCurrency = JSON.parse(ctx.callbackQuery.data)
		// @ts-ignore
		ctx.session.currentCurrency = currentCurrency.value
		const currentCourseBTC = await currencyService.getCurrency('bitcoin')
		const getMessage = () => {
			const currency = currentCurrency.value.toLowerCase()
			const rate = currentCourseBTC?.bitcoin[currency]
			const formattedRate = currencyFormatter(rate!, currency)
			
			return `–°—Ä–µ–¥–Ω–∏–π —Ä—ã–Ω–æ—á–Ω—ã–π –∫—É—Ä—Å —Å–µ–π—á–∞—Å: ${formattedRate}\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: <b>Coingecko</b>`
		}

		ctx.editMessageText(
			`${getMessage()!}\n\n–ö–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å BTC –≤ ${currentCurrency.value}?\n\n–ü—Ä–∏—à–ª–∏—Ç–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–¥–Ω–∏–º –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π:\n\n–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∫—É—Ä—Å–∞:\n–ü—Ä–∏–º–µ—Ä: +5% (–∏–ª–∏ -1%, 0%)\n\n–∏–ª–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ ${currentCurrency.value}:\n–ü—Ä–∏–º–µ—Ä: ${currentCurrency.value === 'RUB' ? '4000000' : currentCurrency.value === 'USD' ? '50000' : '45000'}\n\n–∏–ª–∏ —Ä–∞–∑–Ω–∏—Ü—É –≤ ${currentCurrency.value} –æ—Ç –±–∏—Ä–∂–µ–≤–æ–≥–æ –∫—É—Ä—Å–∞:\n\n–ü—Ä–∏–º–µ—Ä: ${currentCurrency.value === 'RUB' ? '+15000' : currentCurrency.value === 'USD' ? '+200' : '+150'} (–∏–ª–∏ ${currentCurrency.value === 'RUB' ? '-15000' : currentCurrency.value === 'USD' ? '-200' : '-150'}, ${currentCurrency.value === 'RUB' ? '-5000' : currentCurrency.value === 'USD' ? '-50' : '-40'})\n\n‚ö†Ô∏è –í –∫—É—Ä—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á—Ç–µ–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º. –ü—Ä–∞–≤–∏–ª–∞–º–∏ —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤–∑–∏–º–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–æ—á–Ω—É—é —Å—É–º–º—É —Å–¥–µ–ª–∫–∏`,
			{
				parse_mode: 'HTML',
				reply_markup: {
					inline_keyboard: [
						[{ callback_data: 'fix_price', text: '–ë–∏—Ä–∂–µ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å' }]
					],
				},
			}
		)
		return ctx.wizard.next()
	} catch (error) {
		console.log(error)
		return ctx.reply('ü§¨ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞', {
			reply_markup: {
				inline_keyboard: [
					[
						{
							callback_data: 'main_menu',
							text: '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
						},
					],
				],
			},
		})
	}
}

const sendPricePerOneCoin = async (ctx: AddContractContext) => {
	try {
		// @ts-ignore
		const coinPrice = await currencyService.getCurrency('bitcoin')
		// @ts-ignore
		if (ctx.callbackQuery?.data) {
			// @ts-ignore
			if (ctx.callbackQuery.data === 'fix_price') {
				// @ts-ignore
				if (ctx.session.currentCurrency === 'RUB') {
					// @ts-ignore
					ctx.session.pricePerCoin = coinPrice?.bitcoin.rub
				}
				// @ts-ignore
				else if (ctx.session.currentCurrency === 'USD') {
					// @ts-ignore
					ctx.session.pricePerCoin = coinPrice?.bitcoin.usd
				} else {
					// @ts-ignore
					ctx.session.pricePerCoin = coinPrice?.bitcoin.eur
				}
			}
		} else {
			const userPrice = ctx.text
			// @ts-ignore
			let btcCurrency = coinPrice?.bitcoin.rub
			if (userPrice?.endsWith('%')) {
				if (userPrice?.startsWith("+")) {
					console.log('–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞:', btcCurrency, parseInt(ctx.text!))
					// @ts-ignore
					ctx.session.pricePerCoin = btcCurrency + (btcCurrency * (parseInt(ctx.text!) / 100))
				} else if (userPrice?.startsWith("-")) {
					// @ts-ignore
					ctx.session.pricePerCoin = btcCurrency - (btcCurrency * (Math.abs(parseInt(ctx.text!) / 100)))
				}
			} else {
				if (userPrice?.startsWith("+") || userPrice?.startsWith("-")) {
					// @ts-ignore
					ctx.session.pricePerCoin = btcCurrency + parseInt(ctx.text!)
				} else {
					// @ts-ignore
					ctx.session.pricePerCoin = parseInt(ctx.text!)
				}
			}
		}
		// @ts-ignore
		const pricePerCoin = ctx.session.pricePerCoin
		await ctx.reply(
			`<b>–õ–∏–º–∏—Ç—ã</b>\n\n–£–∫–∞–∑–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –∑–∞ 1 BTC: <b>${currencyFormatter(
				pricePerCoin,
				// @ts-ignore
				ctx.session.currentCurrency.toLowerCase()
			)}</b>\n\n–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω. –∏ –º–∞–∫—Å. —Å—É–º–º—É –æ—Ç–∫–ª–∏–∫–∞ –≤ ${ctx.session.currentCurrency}.\n<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b> ${ctx.session.currentCurrency === 'RUB' ? '1 - 1000000' : ctx.session.currentCurrency === 'USD' ? '1 - 10000' : '1 - 9000'}`,
			{
				parse_mode: 'HTML',
			}
		)
		return ctx.wizard.next()
	} catch (error) {
		console.log(error)
		return ctx.reply('ü§¨ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞', {
			reply_markup: {
				inline_keyboard: [
					[
						{
							callback_data: 'main_menu',
							text: '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
						},
					],
				],
			},
		})
	}
}

const selectPaymentMethod = async (ctx: AddContractContext) => {
	try {
		const message = ctx.text

		const findInt = message?.split('-')
		const numbers = findInt?.map(item => {
			return parseInt(item.trim())
		})

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Å—Å–∏–≤ numbers —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
		if (!numbers || numbers.length !== 2 || isNaN(numbers[0]) || isNaN(numbers[1])) {
			await ctx.reply('–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 - 5000')
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∏—Å–ª–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
		if (numbers[0] <= 0 || numbers[1] <= 0) {
			await ctx.reply('–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞')
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π
		if (numbers[0] > numbers[1]) {
			await ctx.reply('–û—à–∏–±–∫–∞: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.')
			return
		}

		// @ts-ignore
		ctx.scene.session.minPrice = numbers[0]
		// @ts-ignore
		ctx.scene.session.maxPrice = numbers[1]

		const user = await userService.fetchOneById({
			id: ctx.from!.id
		})

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏
		// @ts-ignore
		if (ctx.session.actionType === "sell") {
			if (!user?.wallet) {
				await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫.')
				return
			}
			// @ts-ignore
			const userCurrencyToBTC = await currencyService.convertRubleToBTC(Number(ctx.scene.session.maxPrice), ctx.session.currentCurrency, "CURRENCY")
			if (user.wallet.balance < userCurrencyToBTC) {
				await ctx.reply('–°—É–º–º–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –º–µ–Ω—å—à–µ —Å—É–º–º—ã –ª–∏–º–∏—Ç–∞')
				return
			}
		}

		const paymentMethods = await prisma.paymentMethod.findMany()
		const selectedCurrency = ctx.session.currentCurrency
		const keyboard = await paymentMethodsForContract(paymentMethods, selectedCurrency)
		
		await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã`, {
			parse_mode: 'HTML',
			reply_markup: {
				inline_keyboard: keyboard,
			},
		})
		return ctx.wizard.next()
	} catch (error) {
		console.log(error)
		return ctx.reply('ü§¨ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞', {
			reply_markup: {
				inline_keyboard: [
					[
						{
							callback_data: 'main_menu',
							text: '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
						},
					],
				],
			},
		})
	}
}

const writePaymentMethod = async (ctx: AddContractContext) => {
	const {setPaymentMethod, currentPaymentMethodId} = useCurrentPaymentMethod(ctx)
	const callbackQuery = ctx.callbackQuery
	console.log('Selected payment method:', callbackQuery.data)
	
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–ø–æ—Å–æ–±–µ –æ–ø–ª–∞—Ç—ã
	const selectedPaymentMethod = await prisma.paymentMethod.findUnique({
		where: {
			id: Number(callbackQuery.data)
		}
	})
	
	if (!selectedPaymentMethod) {
		await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω')
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —Ç–µ–∫—É—â—É—é –≤–∞–ª—é—Ç—É
	const supportedCurrencies = SUPPORTED_CURRENCIES[selectedPaymentMethod.name] || ['RUB', 'USD', 'EUR']
	const isSupported = supportedCurrencies.includes(ctx.session.currentCurrency)
	
	if (!isSupported) {
		await ctx.reply(
			`‚ùå –û—à–∏–±–∫–∞: ${selectedPaymentMethod.name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–ø–ª–∞—Ç—É –≤ ${ctx.session.currentCurrency}\n\n` +
			`–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: ${supportedCurrencies.join(', ')}`
		)
		return
	}
	
	setPaymentMethod(callbackQuery.data)
	console.log('Current payment method ID after set:', currentPaymentMethodId)

	await prisma.requisite.findMany({
		where: {
			userId: ctx.from.id.toString(),
			paymentMethodId: Number(currentPaymentMethodId)
		}
	}).then(response => ctx.editMessageText(response ? '–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π' : '–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', {
		reply_markup: {
			inline_keyboard: [...response.map(button => (
				[
					{
						callback_data: button.id.toString(),
						text: `${button.phoneOrbankCardNumber} | ${button.currency}`
					}
				]
			))]
		}
	}))
	return ctx.wizard.next()
}

const createContract = async (ctx: AddContractContext) => {
	try {
		let initialContractRequisite
		const callbackQuery = ctx.callbackQuery
		if (callbackQuery?.data) {
			const requisite = await prisma.requisite.findFirst({
				where: {
					id: Number(callbackQuery.data)
				}
			})
			ctx.session.currentRequisite = requisite
		}
		const {currentPaymentMethodId} = useCurrentPaymentMethod(ctx)
		
		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –±–∞–ª–∞–Ω—Å
		const user = await userService.fetchOneById({
			id: ctx.from.id
		})
		
		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –≤ BTC
		const maxAmountInBTC = await currencyService.convertRubleToBTC(
			ctx.scene.session.maxPrice,
			ctx.session.currentCurrency,
			"CURRENCY"
		)
		
		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –∑–∞ 1 BTC
		const pricePerCoin = ctx.session.pricePerCoin
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Ç–∏–ø–∞ "sell")
		if (ctx.session.actionType === "sell") {
			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			if (!user?.wallet) {
				return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫.', {
					reply_markup: {
						inline_keyboard: [
							[{ callback_data: 'main_menu', text: '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]
						]
					}
				});
			}
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ —Å —É—á–µ—Ç–æ–º —É–∂–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
			const balanceCheck = await frozenBalanceService.checkAvailableBalance(
				user.id, 
				maxAmountInBTC
			);
			
			if (!balanceCheck.sufficient) {
				return ctx.reply(`‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balanceCheck.totalBalance.toFixed(8)} BTC\nüßä –£–∂–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ –≤ –¥—Ä—É–≥–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö: ${balanceCheck.frozenBalance.toFixed(8)} BTC\nüíµ –î–æ—Å—Ç—É–ø–Ω–æ: ${balanceCheck.availableBalance.toFixed(8)} BTC\nüîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${maxAmountInBTC.toFixed(8)} BTC`, {
					parse_mode: 'HTML',
					reply_markup: {
						inline_keyboard: [
							[{ callback_data: 'main_menu', text: '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]
						]
					}
				});
			}
			
			console.log(`[CONTRACT_CREATE] Freezing ${maxAmountInBTC} BTC for contract`);
		}
		
		// –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
		initialContractRequisite = await prisma.contractRequisite.create({
			data: {
				paymentMethodId: callbackQuery?.data ? ctx.session.currentRequisite.paymentMethodId : Number(currentPaymentMethodId),
				currency: ctx.session.currentCurrency,
				paymentData: callbackQuery?.data ? ctx.session.currentRequisite.phoneOrbankCardNumber : ctx.text
			}
		})

		// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
		const contract = await prisma.contract.create({
			data: {
				type: ctx.session.actionType,
				price: ctx.scene.session.minPrice,
				amount: ctx.session.pricePerCoin,
				userId: ctx.from.id.toString(),
				currency: ctx.session.currentCurrency,
				maxPrice: ctx.scene.session.maxPrice,
				contractRequisiteId: initialContractRequisite.id,
				paymentMethodId: callbackQuery?.data ? ctx.session.currentRequisite.paymentMethodId : Number(currentPaymentMethodId)
			}
		})

		// –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–∏–ø–∞ "sell", –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
		if (ctx.session.actionType === "sell") {
			// –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
			const freezeResult = await frozenBalanceService.freezeBalance(
				user.id,
				contract.id,
				maxAmountInBTC
			)
			
			if (!freezeResult) {
				console.error(`[CONTRACT_CREATE] Failed to freeze balance for contract #${contract.id}`)
				// –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞
				await prisma.contract.delete({
					where: {
						id: contract.id
					}
				})
				
				return ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–æ—Ä–æ–∑–∫–µ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
					reply_markup: {
						inline_keyboard: [
							[{ callback_data: 'main_menu', text: '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]
						]
					}
				})
			}
			
			console.log(`[CONTRACT_CREATE] Successfully froze ${maxAmountInBTC} BTC for contract #${contract.id}`)
		}

		const finalContractRequisite = await prisma.contractRequisite.findFirst({
			where: {
				id: Number(contract.contractRequisiteId)
			},
			include: {
				paymentMethod: true
			}
		})

		if (!ctx.from?.id) {
			throw new Error('User ID is not defined')
		}

		const paymentMethod = await prisma.paymentMethod.findFirst({
			where: {
				id: finalContractRequisite?.paymentMethodId
			}
		})

		await ctx.reply(
			`üéâ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
			`üìä –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏:\n` +
			`‚Ä¢ –ù–æ–º–µ—Ä: #${contract.code}\n` +
			`‚Ä¢ –¢–∏–ø: ${ctx.session.actionType === 'sell' ? '–ü—Ä–æ–¥–∞–∂–∞' : '–ü–æ–∫—É–ø–∫–∞'} BTC\n` +
			`‚Ä¢ –¶–µ–Ω–∞ –∑–∞ 1 BTC: ${currencyFormatter(ctx.session.pricePerCoin, ctx.session.currentCurrency)}\n\n` +
			`‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 15 –º–∏–Ω—É—Ç\n\n` +
			`üë§ –¢—Ä–µ–π–¥–µ—Ä: /user_${contract.userId}\n` +
			`‚≠êÔ∏è –†–µ–ø—É—Ç–∞—Ü–∏—è: 100%\n` +
			`üìù –û—Ç–∑—ã–≤—ã: üòä(0) üôÅ(0)\n` +
			`üìà –ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫: 0\n` +
			`üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞\n\n` +
			`üí∞ –£—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏:\n` +
			`‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${currencyFormatter(ctx.scene.session.minPrice, ctx.session.currentCurrency)}\n` +
			`‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${currencyFormatter(ctx.scene.session.maxPrice, ctx.session.currentCurrency)}\n\n` +
			`üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${paymentMethod?.name}\n` +
			`üì± –†–µ–∫–≤–∏–∑–∏—Ç—ã: ${finalContractRequisite?.paymentData}\n\n` +
			(ctx.session.actionType === 'sell' ? `üßä –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–∞—è —Å—É–º–º–∞: ${maxAmountInBTC.toFixed(8)} BTC\n\n` : '') +
			`‚ùóÔ∏è –í–∞–∂–Ω–æ: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è`,
			{
				parse_mode: 'HTML',
				reply_markup: {
					inline_keyboard: [
						[
							{
								callback_data: 'main_menu',
								text: '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
							},
						],
					],
				},
			}
		)
		await ctx.scene.leave()
		return ctx.reply('‚ö°Ô∏è')
	} catch (error) {
		console.log(error)
		if (ctx.from?.id) {
			return ctx.reply('ü§¨ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞', {
				reply_markup: {
					inline_keyboard: [
						[
							{
								callback_data: 'main_menu',
								text: '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
							},
						],
					],
				},
			})
		}
	}
	return
}

export const AddContract = new Scenes.WizardScene<AddContractContext>(
	'add_contract',
	selectAction,
	selectCurrency,
	chooseCountBTC,
	sendPricePerOneCoin,
	selectPaymentMethod,
	writePaymentMethod,
	createContract
)
