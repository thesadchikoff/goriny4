import {prisma} from '@/prisma/prisma.client'
import {getWalletBalance} from '@/trust-wallet/get-balance'
import {Markup, Scenes} from 'telegraf'
import {WizardContext} from 'telegraf/typings/scenes'

const writeAmountForPromo = async (ctx: WizardContext) => {
	await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–∏–Ω–∞–ª –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞', {
		reply_markup: {
			inline_keyboard: [[{
				text: '–û—Ç–º–µ–Ω–∞',
				callback_data: 'cancel_scene'
			}]]
		}
	})
	return ctx.wizard.next()
}

const writePromoName = async (ctx: WizardContext) => {
	try {
		const user = await prisma.user.findFirst({
			where: {
				id: ctx.from?.id.toString(),
			},
			include: {
				wallet: true,
			},
		})
		const balance = await getWalletBalance(user?.wallet?.address)
		console.log(parseFloat(ctx.text!), balance)
		// @ts-ignore
		ctx.scene.state.amount = parseFloat(ctx.text!)
		if (balance! < parseInt(ctx.text!)) {
			await ctx.reply('–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BTC.', {
				reply_markup: {
					inline_keyboard: [[{
						text: '–û—Ç–º–µ–Ω–∞',
						callback_data: 'cancel_scene'
					}]]
				}
			})
			ctx.wizard.back()
			return writeAmountForPromo(ctx)
		} else {
			await ctx.reply('üé´ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞', {
				reply_markup: {
					inline_keyboard: [[{
						text: '–û—Ç–º–µ–Ω–∞',
						callback_data: 'cancel_scene'
					}]]
				}
			})
			return ctx.wizard.next()
		}
	} catch (error) {
		console.log(error)
		await ctx.scene.leave()
		return ctx.reply('‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞', {
			reply_markup: {
				inline_keyboard: [[{
					text: '–û—Ç–º–µ–Ω–∞',
					callback_data: 'cancel_scene'
				}]]
			}
		})
	}
}

const createPromoCode = async (ctx: WizardContext) => {
	try {
		// @ts-ignore
		ctx.scene.state.name = ctx.text!.toUpperCase()
		// @ts-ignore
		const amount = ctx.scene.state.amount
		// @ts-ignore
		const name = ctx.scene.state.name
		await prisma.code
			.create({
				data: {
					amountCoins: amount,
					code: name,
					creatorId: ctx.from?.id.toString(),
				},
			})
			.then(response => {
				ctx.reply(
					`–ü—Ä–æ–º–æ–∫–æ–¥ <code>${response.code}</code> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–ù–æ–º–∏–Ω–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥–∞ - <b>${response.amountCoins} BTC</b>\n\n‚ùóÔ∏è –ù–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º, –≤–µ–¥—å –ø—Ä–∏ –µ–≥–æ –≤–≤–æ–¥–µ —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–µ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∞ —Å—É–º–º–∞ —Ä–∞–≤–Ω–∞—è –Ω–æ–º–∏–Ω–∞–ª—É –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –µ–≥–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ.`,
					{
						parse_mode: 'HTML',
						reply_markup: {
							remove_keyboard: true,
							inline_keyboard: [
								[{ callback_data: 'main_menu', text: '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }],
							],
						},
					}
				)
			})
		ctx.scene.state = {}
		return ctx.scene.leave()
	} catch (error) {
		console.log(error)
		await ctx.reply(
			'‚ùóÔ∏è –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.',
			Markup.removeKeyboard()
		)
		ctx.scene.state = {}
		await ctx.scene.leave()
		return true
	}
}

export const CreatePromo = new Scenes.WizardScene<WizardContext>(
	'create-promo',
	writeAmountForPromo,
	writePromoName,
	createPromoCode
)
