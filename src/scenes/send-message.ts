import {generateUrlForUser} from '@/utils/generate-user-url'
import {Scenes} from 'telegraf'
import {InlineKeyboardButton} from 'telegraf/typings/core/types/typegram'
import {WizardContext} from 'telegraf/typings/scenes'
import {prisma} from '../prisma/prisma.client'
import {currencyFormatter} from '../utils/currency-formatter'
import disputeModule from "@/core/dispute/dispute.module";

const writeMessage = async (ctx: WizardContext) => {
	try {
		await ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:')
		return ctx.wizard.next()
	} catch (error) {
		console.error('Error in writeMessage:', error)
		await ctx.reply('‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥.')
		return ctx.scene.leave()
	}
}

const sendingMessage = async (ctx: WizardContext) => {
	try {
		// @ts-ignore
		const userId = ctx.from?.id.toString()

		if (!userId) throw new Error('User ID not found in wizard state')

		const contract = await prisma.contractTransaction.findFirst({
			where: {
				OR: [
					{
						buyerId: userId,
					},
					{
						sellerId: userId,
					},
				],
			},
			include: {
				buyer: true,
				seller: true,
				contract: true,
			},
		})

		if (!contract?.id || !contract.buyerId || !contract.sellerId) {
			await ctx.reply('‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')
			return ctx.scene.leave()
		}

		const { sellerId, buyerId } = contract

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º sellerId –∏ buyerId –≤ state
		// @ts-ignore
		ctx.session.sellerId = sellerId
		// @ts-ignore
		ctx.session.buyerId = buyerId

		const activeSellerId = ctx.session.sellerId
		const activeBuyerId = ctx.session.buyerId

		const currentTradeContract = await prisma.contractTransaction.findFirst({
			where: {
				OR: [
					{ sellerId: String(ctx.from?.id) },
					{ buyerId: String(ctx.from?.id) },
				],
			},
			include: { buyer: true, seller: true },
		})

		if (!currentTradeContract) {
			await ctx.reply('‚ùóÔ∏è –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
			return ctx.scene.leave()
		}

		const inlineButtons: InlineKeyboardButton[][] = [
			[
				{
					callback_data: `send-message-${activeSellerId}`,
					text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å',
				},
			],
		]

		const isBuyer = contract.buyerId === ctx.from!.id.toString()
		if (contract.contract.type === 'buy') {
			ctx.session.tradeAction = 'buy'
			inlineButtons[0].push({
				callback_data: isBuyer
					? `payment-contract-${contract.id}`
					: `payment-successful-${contract.id}`,
				text: isBuyer ? '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª' : '‚úÖ –î–µ–Ω—å–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã',
			})
		} else {
			ctx.session.tradeAction = 'sell'
			inlineButtons[0].push({
				callback_data: isBuyer
					? `payment-successful-${contract.id}`
					: `payment-contract-${contract.id}`,
				text: isBuyer ? '‚úÖ –î–µ–Ω—å–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã' : '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª',
			})
		}
		const openDisputeButton = isBuyer ? disputeModule.getDisputeButton('open') : []
		// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		const recipientId =
			currentTradeContract.sellerId === ctx.from!.id.toString()
				? currentTradeContract.buyerId
				: currentTradeContract.sellerId

		await ctx.telegram.sendMessage(
			recipientId!,
			`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${
				currentTradeContract.sellerId === ctx.from!.id.toString()
					? '—Ç—Ä–µ–π–¥–µ—Ä–∞'
					: '–ø–æ–∫—É–ø–∞—Ç–µ–ª—è'
			} /${
				currentTradeContract.sellerId === ctx.from!.id.toString()
					? currentTradeContract.seller!.login
					: currentTradeContract.buyer!.login
			}\n–°–¥–µ–ª–∫–∞ #${
				currentTradeContract.code
			}\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - ${currencyFormatter(
				contract.contract.price!,
				contract.contract.currency!
			)}\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - ${currencyFormatter(
				contract.contract.maxPrice!,
				contract.contract.currency!
			)}\n–°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏: –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã\n\n---------------------------\n${
				ctx.text || '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
			}\n---------------------------\n‚ùóÔ∏è–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∏–º–µ–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è!`,
			{
				parse_mode: 'HTML',
				reply_markup: { inline_keyboard: [...inlineButtons, openDisputeButton] },
			}
		)
		const userUrl = generateUrlForUser(
			isBuyer ? contract.buyer!.login! : contract.seller!.login!
		)
		// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
		await ctx.reply(
			`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <a href="${userUrl}">${
				isBuyer ? contract.buyer?.login : contract.seller?.login
			}</a> —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.`,
			{
				parse_mode: 'HTML',
			}
		)
		return ctx.scene.leave()
	} catch (error) {
		console.error('Error in sendingMessage:', error)
		await ctx.reply('‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.')
		return ctx.scene.leave()
	}
}

export const SendMessage = new Scenes.WizardScene<WizardContext>(
	'send_message',
	writeMessage,
	sendingMessage
)
