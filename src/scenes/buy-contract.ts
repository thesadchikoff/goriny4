import * as cron from 'node-cron'
import {Scenes} from 'telegraf'
import {WizardContext} from 'telegraf/typings/scenes'
import {prisma} from '../prisma/prisma.client'
import {currencyFormatter} from '../utils/currency-formatter'
import {dateFormat} from '../utils/format-date'
import userService from "@/db/user.service";
import currencyService from "@/service/currency.service";

const sendBuyAmount = async (ctx: WizardContext) => {
	try {
		console.log(ctx.session.currentTradeType)
		const userTransactions = await prisma.contractTransaction.findFirst({
			where: {
				buyerId: ctx.from?.id.toString()!,
			},
		})
		if (userTransactions) {
			await ctx.reply(
				'–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è. –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.'
			)
			return ctx.scene.leave()
		}
		const contract = await prisma.contract.findFirst({
			where: {
				id: ctx.session.currentContractId
			},
			include: {
				author: {
					include: {
						SellerContractTransaction: true
					}
				},
				paymentMethod: {
					include: {
						Requisite: true
					}
				},
				ContractRequisite: true
			}
		})
		const currentMethod = contract?.paymentMethod.Requisite.filter(
			requisite => requisite.paymentMethodId !== contract.paymentMethod.id
		)
		console.log(currentMethod)
		ctx.scene.state = {}
		// @ts-ignore
		ctx.scene.state.contract = JSON.stringify(contract)
		// @ts-ignore
		const currentContract = ctx.scene.state.contract

		await ctx.reply(
			`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ ${contract?.currency?.toUpperCase()} –¥–ª—è ${ctx.session.currentTradeType === 'sell' ? "–ø–æ–∫—É–ø–∫–∏" : "–ø—Ä–æ–¥–∞–∂–∏"}\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ - ${currencyFormatter(
				// @ts-ignore
				contract?.price!,
				// @ts-ignore
				contract?.currency!
			)}\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ - ${currencyFormatter(
				// @ts-ignore
				contract?.maxPrice!,
				// @ts-ignore
				contract?.currency!
			)}` +
			(contract?.comment ? `\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:</b>\n${contract.comment}` : ''),
			{
				parse_mode: 'HTML',
			}
		)
		return ctx.wizard.next()
	} catch (error) {
		console.log(error)
		await ctx.scene.leave()
		return ctx.reply('‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')
	}
}

const doneContract = async (ctx: WizardContext) => {
	try {
		// @ts-ignore
		const contract = JSON.parse(ctx.scene.state.contract)
		const sendPrice = parseInt(ctx.text!)
		console.log('CONTRACT', contract)
		if (contract.type === 'buy') {
			const user = await userService.fetchOneById({
				id: ctx!.from!.id
			})
			const userBalance = await currencyService.convertRubleToBTC(user!.wallet!.balance)
            console.log(sendPrice, userBalance)
			if (userBalance < Number(sendPrice)) {
				await ctx.reply('–í–∞—à –±–∞–ª–∞–Ω—Å –Ω–∏–∂–µ, —á–µ–º —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤–∞–º–∏ —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞')
				ctx.wizard.back()
				return sendBuyAmount(ctx)
			}
		}
		if (sendPrice < contract.price || sendPrice > contract.maxPrice) {
			await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.')
			ctx.wizard.back()
			return sendBuyAmount(ctx)
		} else {
			// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ ID
			try {
				// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –∫—É–ø–∏—Ç—å —É —Å–∞–º–æ–≥–æ —Å–µ–±—è
				if (contract.author.id === ctx.from?.id.toString()) {
					await ctx.reply('‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —É —Å–∞–º–æ–≥–æ —Å–µ–±—è', {
						parse_mode: 'HTML'
					});
					return ctx.scene.leave();
				}
				
				console.log('[BUY_CONTRACT] Creating transaction');
				
				// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
				const newTransaction = await prisma.contractTransaction.create({
					data: {
						buyerId: ctx.from?.id.toString()!,
						sellerId: contract.author.id,
						amount: sendPrice,
						contractId: contract.id,
						isAccepted: false
					},
				});
				
				// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
				console.log('[BUY_CONTRACT] Created transaction with ID:', newTransaction.id);
				
				// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —É–¥–∞–ª–µ–Ω–∏—è
				const taskNotifyForUsers = cron.schedule(
					'* 12 * * * *',
					async () => {
						await ctx.telegram.sendMessage(
							Number(newTransaction.buyerId),
							`‚ùóÔ∏è –î–æ –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å 3 –º–∏–Ω—É—Ç—ã. –ü–æ—Å–ø–µ—à–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ—ë`
						);
						await ctx.telegram.sendMessage(
							Number(newTransaction.sellerId),
							`‚ùóÔ∏è –î–æ –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å 3 –º–∏–Ω—É—Ç—ã. –ü–æ—Å–ø–µ—à–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ—ë`
						);
						taskNotifyForUsers.stop();
					}
				);
				
				const taskDeleteTransaction = cron.schedule(
					'* 15 * * * *',
					async () => {
						await prisma.contractTransaction.delete({
							where: {
								id: newTransaction.id,
							},
						});
						taskDeleteTransaction.stop();
					}
				);
				
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
				await ctx.reply(
					`üéâ <b>–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n` +
					`üìä <b>–î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏:</b>\n` +
					`‚Ä¢ –ù–æ–º–µ—Ä: #${contract?.code}\n` +
					`‚Ä¢ –¢–∏–ø: –ü–æ–∫—É–ø–∫–∞ BTC\n` +
					`‚Ä¢ –¶–µ–Ω–∞ –∑–∞ 1 BTC: ${currencyFormatter(contract?.amount!, contract?.currency!)}\n\n` +
					`‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 15 –º–∏–Ω—É—Ç\n\n` +
					`üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ:</b>\n` + 
					`‚Ä¢ –¢—Ä–µ–π–¥–µ—Ä: /${contract?.author.login}\n` +
					`‚Ä¢ –†–µ–ø—É—Ç–∞—Ü–∏—è: 100%\n` +
					`‚Ä¢ –û—Ç–∑—ã–≤—ã: üòä(0) üôÅ(0)\n` +
					`‚Ä¢ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫: 0\n` +
					`‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${dateFormat(contract?.author.createdAt!)}\n\n` +
					`üí∞ <b>–£—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏:</b>\n` +
					`‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${currencyFormatter(contract!.price!, contract?.currency!)}\n` +
					`‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${currencyFormatter(contract!.maxPrice!, contract?.currency!)}\n\n` +
					`üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> ${contract?.paymentMethod?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
					`üì± <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> ${contract?.ContractRequisite?.paymentData || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n\n` +
					`‚ùóÔ∏è <b>–í–∞–∂–Ω–æ:</b> –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è`,
					{
						parse_mode: 'HTML',
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
										callback_data: `cancel-transaction-${newTransaction.id}`
									},
									{
										callback_data: `send-message-${contract.author.id}`,
										text: '‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å',
									},
								],
							],
						},
					}
				);
				
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
				const currentUser = await prisma.user.findFirst({
					where: {
						id: ctx.from?.id.toString(),
					},
				});
				
				const btcPerCurrency = await currencyService.convertRubleToBTC(sendPrice, contract.currency, "CURRENCY");
				
				await ctx.telegram.sendMessage(
					contract.author.id,
					`–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ ${
						contract.type === 'buy' ? '–ø—Ä–æ–¥–∞–∂–µ' : '–ø–æ–∫—É–ø–∫–µ'
					} –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é #${contract.code}\n\n–ü–æ–∫—É–ø–∞–µ—Ç /${
						currentUser!.login
					}\nBTC –Ω–∞ —Å—É–º–º—É ${currencyFormatter(sendPrice, contract.currency)} (${btcPerCurrency.toFixed(6)} BTC)`,
					{
						parse_mode: 'HTML',
						reply_markup: {
							inline_keyboard: [
								[
									{
										callback_data: `send-message-${ctx.from?.id}`,
										text: '‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å',
									},
								],
							],
						},
					}
				);
			} catch (error) {
				console.error('[BUY_CONTRACT] Error creating transaction:', error);
				await ctx.reply('‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
			}
		}
		ctx.scene.state = {}
		return ctx.scene.leave()
	} catch (error) {
		console.log(error)
		ctx.scene.leave()
		return ctx.reply('‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')
	}
}

export const BuyContract = new Scenes.WizardScene<WizardContext>(
	'buy-contract',
	sendBuyAmount,
	doneContract
)
