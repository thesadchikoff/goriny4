import { Networks } from 'bitcore-lib'
import { Scenes } from 'telegraf'
import { WizardContext } from 'telegraf/typings/scenes'
import { prisma } from '../prisma/prisma.client'
import { sendCoin } from '../trust-wallet/send-coin'
import { addBalance, deductBalance } from '../utils/balance.utils'

const writePromoCode = async (ctx: WizardContext) => {
	try {
		ctx.reply('üé´ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏')
		return ctx.wizard.next()
	} catch (error) {
		console.log(error)
		ctx.scene.leave()
		return ctx.reply('‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')
	}
}

const findPromoCodeAndActivation = async (ctx: WizardContext) => {
	try {
		const code = await prisma.code.findFirst({
			where: {
				code: ctx.text?.toUpperCase(),
			},
		})

		if (!code) {
			ctx.reply(
				`üö´ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n–í–æ–∑–º–æ–∂–Ω–æ —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤—ã —É–∫–∞–∑–∞–ª–∏ –µ–≥–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`,
				{
					reply_markup: {
						inline_keyboard: [
							[
								{
									callback_data: 'activate_code',
									text: 'üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å',
								},
							],
						],
					},
					parse_mode: 'HTML',
				}
			)
			ctx.scene.leave()
		} else {
			const selfUser = await prisma.user.findFirst({
				where: {
					id: ctx.from?.id.toString(),
				},
				include: {
					wallet: true,
				},
			})

			if (!selfUser || !selfUser.wallet) {
				throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥
			if (code.creatorId === selfUser.id) {
				ctx.reply(
					`üö´ <b>–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>\n\n–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥`,
					{
						reply_markup: {
							inline_keyboard: [
								[
									{
										callback_data: 'activate_code',
										text: 'üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å',
									},
								],
							],
						},
						parse_mode: 'HTML',
					}
				)
				return ctx.scene.leave()
			}

			// –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
			const creator = await prisma.user.findUnique({
				where: { id: code.creatorId! },
				include: { wallet: true }
			})

			if (!creator || !creator.wallet) {
				throw new Error('–°–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏–ª–∏ –µ–≥–æ –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
			}

			// –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å —É —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
			await deductBalance(creator.id, code.amountCoins)

			// –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∞–∫—Ç–∏–≤–∏—Ä—É—é—â–µ–º—É
			await addBalance(selfUser.id, code.amountCoins)
			
			await prisma.code.delete({
				where: {
					id: code.id,
				},
			})

			ctx.reply(
				`üé´ –ü—Ä–æ–º–æ–∫–æ–¥ ${code.code} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>${code.amountCoins}</b> BTC`,
				{
					parse_mode: 'HTML',
				}
			)

			// –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
			ctx.telegram.sendMessage(
				parseInt(creator.id),
				`‚ÑπÔ∏è <b>–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ ${code.code} –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @${selfUser.username}\n–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ ${code.amountCoins} BTC`,
				{ parse_mode: 'HTML' }
			)

			return ctx.scene.leave()
		}
	} catch (error) {
		console.log(error)
		ctx.scene.leave()
		return ctx.reply('‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')
	}
}

export const ActivatePromo = new Scenes.WizardScene<WizardContext>(
	'activate-promo',
	writePromoCode,
	findPromoCodeAndActivation
)
