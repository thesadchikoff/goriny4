import {Scenes} from 'telegraf'
import {BotContext} from "@/@types/scenes";
import userService from "@/db/user.service";
import {calculationFee} from "@/utils/calculation-fee";

const sendWalletAddress = async (ctx: BotContext) => {
	ctx.session.transfer = {}
	try {
		await ctx.reply(`–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ BTC.`)
		return ctx.wizard.next()
	} catch (error) {
		console.log(error)
		await ctx.scene.leave()
		return ctx.reply('‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')
	}
}

const sendCountBTC = async (ctx: BotContext) => {
	try {
		await ctx.reply(`–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC  –¥–ª—è –≤—ã–≤–æ–¥–∞.`)
		ctx.session.transfer!.recipientAddress = <string>ctx.text
		return ctx.wizard.next()
	} catch (error) {
		console.log(error)
		await ctx.scene.leave()
		return ctx.reply('‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')
	}
}

const sendBTC = async (ctx: BotContext) => {
	try {
		ctx.session.transfer!.countBTC = <number>Number(ctx.text)
		const user = await userService.fetchOneById({
			id: ctx.from!.id
		})
		const userBalance = user!.wallet!.balance
		if (userBalance < ctx.session.transfer!.countBTC) {
			await ctx.reply('üî¥ –ë–∞–ª–∞–Ω—Å BTC –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–∏–∂–µ –∑–∞—è–≤–ª–µ–Ω–Ω–æ–π —Å—É–º–º—ã')
			ctx.wizard.back()
			return sendCountBTC(ctx)
		}
		const {valueWithFee} = await calculationFee(ctx.session.transfer!.countBTC)
		await ctx.reply(
			// @ts-ignore
			`–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?.\n\n–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: <code>${ctx.session.transfer!.recipientAddress}</code>\n–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: <code>${valueWithFee}</code> BTC`,
			{
				parse_mode: 'HTML',
				reply_markup: {
					inline_keyboard: [
						[
							{
								callback_data: 'send-to-admin',
								text: '–í—Å–µ –≤–µ—Ä–Ω–æ',
							},
							{ callback_data: 'decline', text: '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ' },
						],
					],
				},
			}
		)
		return ctx.scene.leave()
	} catch (error) {
		console.log(error)
		await ctx.scene.leave()
		return ctx.reply('‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')
	}
}

export const TransferScene = new Scenes.WizardScene<BotContext>(
	'transfer',
	sendWalletAddress,
	sendCountBTC,
	sendBTC
)
