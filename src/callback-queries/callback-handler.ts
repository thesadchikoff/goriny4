import {bot} from '@/config/bot'
import {currencies} from '@/keyboards/inline-keyboards/currencies.inline'
import {inlineKeyboardForSettings} from '@/keyboards/inline-keyboards/keyboard-for-settings.inline'
import {previousButton} from '@/keyboards/inline-keyboards/previous-button.inline'

import {getMyContracts} from '@/callbacks/get-my-contracts'
import {myCodes} from '@/callbacks/my-codes'
import {requisites} from '@/callbacks/requisites'
import {transferHistory} from '@/callbacks/transfer-history'
import {config} from '@/config/service.config'
import userService from '@/db/user.service'
import {adminInlineKeyboards} from '@/keyboards/inline-keyboards/admin.inline'
import {marketKeyboard} from '@/keyboards/inline-keyboards/p2p-keyboard.inline'
import {promoCodesButtons} from '@/keyboards/inline-keyboards/promo-codes'
import {startInlineKeyboards} from '@/keyboards/inline-keyboards/start-keyboard.inline'
import {prisma} from '@/prisma/prisma.client'
import {getWalletBalance} from '@/trust-wallet/get-balance'
import {replenishBtc} from '@/trust-wallet/replenish-coin'
import {calculationFee} from '@/utils/calculation-fee'
import {currencyFormatter} from '@/utils/currency-formatter'
import {dateFormat} from '@/utils/format-date'
import {Networks} from 'bitcore-lib'
import {InlineKeyboardButton} from 'telegraf/typings/core/types/typegram'
import currencyService from '../service/currency.service'
import disputeModule from "@/core/dispute/dispute.module";
import { cancelTransactionAction } from '@/actions/transfer/cancel-transaction.action'
import frozenBalanceService from '@/service/frozen-balance.service';
import { selfContractAction } from '@/actions'
import { getAdminType, isMasterAdmin } from '@/utils/admin-id.utils';

export const callbackHandler = () => {
	bot.on('callback_query', async query => {
		try {
			// @ts-ignore
			const data = query.update.callback_query?.data
			console.log(query.update.callback_query.from.id.toString())
			const user = await prisma.user.findFirst({
				where: {
					id: query.update.callback_query.from.id.toString(),
				},
			})

			switch (data) {
				case 'settings':
					try {
						const user = await prisma.user.findFirst({
							where: {
								id: query.from.id.toString(),
							},
						})
						return query.editMessageText(
							`<b>üîß ${config.shopName} | –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í–∞—à–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –≤ –±–æ—Ç–µ: <b>${user?.login}</b>\n\n–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.`,
							{
								parse_mode: 'HTML',
								reply_markup: {
									inline_keyboard: inlineKeyboardForSettings(user?.isAdmin!, user?.isBtcSubscribed || false),
								},
							}
						)
					} catch (error) {
						return query.reply(String(error))
					}
				case 'promo':
					try {
						const myCodes = await prisma.code.findMany({
							where: {
								creatorId: query.from.id.toString(),
							},
						})
						return query.reply('üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞–º–∏', {
							reply_markup: {
								inline_keyboard: promoCodesButtons(myCodes.length),
							},
						})
					} catch (error) {
						console.error(error)
					}
				case 'activate_code':
					return query.scene.enter('activate-promo')
				case 'promo_information':
					try {
						return query.editMessageText(
							`‚ÑπÔ∏è –û ${config.shopName} Codes\n–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ –∫–æ–¥–∞–º–∏ ${config.shopName} Code\n${config.shopName} Code  - —ç—Ç–æ –∫–æ–¥ –Ω–∞ —Å—É–º–º—É –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª—é–±—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${config.shopName}\n–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–¥–∞, —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤–∞–º–∏ —Å—É–º–º–∞ –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤ –¥–µ–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –∫–æ–¥ –Ω–µ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n–°—É–º–º–∞ –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ø–æ–∫—É–ø–∫—É\n–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫—É —Å –∫–æ–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏–º–µ—é—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ ${config.shopName}. –ö–∞–∂–¥—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º`,
							{
								parse_mode: 'HTML',
								reply_markup: {
									inline_keyboard: [previousButton('promo')],
								},
							}
						)
					} catch (error) {
						console.error(error)
					}
				case 'add_requisite':
					return query.scene.enter('select_currency')
				case 'cancel_scene':
					console.log(query.scene, 'test')
					await query.scene.leave()
					return query.answerCbQuery('main_menu')
				case 'decline':
					query.session = {}
					query.scene.leave()
					return query.scene.enter('transfer')
				case 'create-address':
					return query.scene.enter('address-book')
				case 'decline_replenish':
					query.session = {}
					query.scene.leave()
					return query.scene.enter('replenish')
				case 'confirm_replenish':
					query.deleteMessage()
					const replenish = replenishBtc(
						query.from.id,
						// @ts-ignore
						query.session.privateKey,
						// @ts-ignore
						query.session.sourceAddress,
						// @ts-ignore
						query.session.countBTC,
						Networks.mainnet
					)
					console.log(replenish)
					query.session = {}
					query.scene.leave()
					return
				case 'transfer_history':
					return transferHistory(query)
				case 'requisites':
					return requisites(query)
				case 'p2p_transfer':
					return query.editMessageText(
						`<strong>üí± ${config.shopName} | –û–±–º–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</strong>\n\n
		–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.\n\n–ú—ã –≤—ã—Å—Ç—É–ø–∞–µ–º –≤ —Ä–æ–ª–∏ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞, —É–¥–µ—Ä–∂–∏–≤–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.\n–≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–∞–∫ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞, —Ç–∞–∫ –∏ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.\n\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–ª—é—á–∞—Ç—å —Å–¥–µ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏.
		`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: marketKeyboard,
							},
						}
					)
				case 'main_menu':
					try {
						return query.editMessageText(
							`<b>üí∞ ${config.shopName} | –ú–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç:`,
							{
								parse_mode: 'HTML',
								reply_markup: {
									inline_keyboard: startInlineKeyboards,
								},
							}
						)
					} catch (error) {
						return query.reply(String(error))
					}
				case 'set_currency':
					try {
						const buttons = await currencies()
						return query.editMessageText(
							`<b>üíµ ${config.shopName} | –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∑–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–±–ª—é–¥–∞—Ç—å:`,
							{
								reply_markup: {
									inline_keyboard: [...buttons, previousButton('settings')],
								},
								parse_mode: 'HTML',
							}
						)
					} catch (error) {
						return query.reply(String(error))
					}
				case 'course_currency':
					try {
						const userCurrency = await prisma.user.findFirst({
							where: {
								id: query.from.id.toString(),
							},
							include: {
								currency: true,
							},
						})
						if (!userCurrency?.currency) {
							// @ts-ignore
							const buttons = await currencies()
							return query.editMessageText(
								`<b>üìä ${config.shopName} | –ö—É—Ä—Å</b>\n\n–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã\n\n–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –µ–µ`,
								{
									parse_mode: 'HTML',
									reply_markup: {
										inline_keyboard: userCurrency?.isAdmin
											? [
												...buttons,
												[
													{
														text: '–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É',
														callback_data: 'set_currency',
													},
												],
												previousButton('settings'),
											]
											: [...buttons, previousButton('settings')],
									},
								}
							)
						}
						const currency = await currencyService.getCurrency('bitcoin')
						return query.editMessageText(
							`<b>üìä ${config.shopName} | –ö—É—Ä—Å ${userCurrency?.currency.value
							}</b>\n\n<b>EUR:</b> ${currencyFormatter(
								currency?.bitcoin.eur!,
								'eur'
							)} ‚Ç¨\n<b>USD:</b> ${currencyFormatter(
								currency?.bitcoin.usd!,
								'usd'
							)} $\n<b>RUB:</b> ${currencyFormatter(
								currency?.bitcoin.rub!,
								'rub'
							)} ‚ÇΩ`,
							{
								parse_mode: 'HTML',
								reply_markup: {
									inline_keyboard: [previousButton('settings')],
								},
							}
						)
					} catch (error) {
						return query.reply(String(error))
					}
				case 'admin-panel':
					return query.editMessageText(
						`üë®‚Äçüíª <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n` +
						`–ß–µ—Ä–µ–∑ —ç—Ç—É –ø–∞–Ω–µ–ª—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: [
									...adminInlineKeyboards,
									previousButton('settings'),
								],
							},
						}
					)
				case 'admin-users':
					try {
						const usersPerPage = 5;
						const page = 1;
						const totalUsers = await prisma.user.count();
						const totalPages = Math.ceil(totalUsers / usersPerPage);
						
						const users = await prisma.user.findMany({
							skip: (page - 1) * usersPerPage,
							take: usersPerPage,
							orderBy: { createdAt: 'desc' },
							include: { wallet: true }
						});
						
						// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
						const userButtons = users.map(user => [
							{
								callback_data: `admin-user-details-${user.id}`,
								text: `${user.isBlocked ? 'üîí ' : ''}${user.username || '–ù–µ—Ç –∏–º–µ–Ω–∏'} ${user.isAdmin ? 'üëë' : ''} | ${user.wallet?.balance || 0} BTC`
							}
						]);
						
						// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
						if (totalPages > 1) {
							const paginationButtons = [];
							
							// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
							if (page > 1) {
								paginationButtons.push({
									callback_data: `admin-users-page-${page - 1}`,
									text: '‚óÄÔ∏è –ù–∞–∑–∞–¥'
								});
							}
							
							// –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
							paginationButtons.push({
								callback_data: 'none',
								text: `${page} –∏–∑ ${totalPages}`
							});
							
							// –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
							if (page < totalPages) {
								paginationButtons.push({
									callback_data: `admin-users-page-${page + 1}`,
									text: '–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è'
								});
							}
							
							userButtons.push(paginationButtons);
						}
						
						// –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
						userButtons.push(previousButton('admin-panel'));
						
						return query.editMessageText(
							`üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n` +
							`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>${totalUsers}</b>\n\n` +
							`–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:`,
							{
								parse_mode: 'HTML',
								reply_markup: {
									inline_keyboard: userButtons
								}
							}
						);
					} catch (error) {
						console.error('[ADMIN_USERS] Error:', error);
						return query.editMessageText(
							'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
							{
								reply_markup: {
									inline_keyboard: [previousButton('admin-panel')]
								}
							}
						);
					}
				case 'change_fee':
					return query.scene.enter('change-fee')
				case 'bitcoin-add':
					try {
						// @ts-ignore
						const coinSplit = query.update.callback_query?.data.split('-')
						const currencyFind = await prisma.currency.findFirst({
							where: {
								key: coinSplit[0],
							},
						})
						if (!currencyFind) {
							return query.editMessageText(
								'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∞–ª—é—Ç—ã',
								{
									parse_mode: 'HTML',

									reply_markup: {
										inline_keyboard: [previousButton('settings')],
									},
								}
							)
						}
						await prisma.user.update({
							where: {
								id: query.from.id.toString(),
							},
							data: {
								currency: {
									connect: {
										id: currencyFind.id,
									},
								},
							},
						})
						return query.editMessageText(
							`–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–µ–±–µ –≤–∞–ª—é—Ç—É ${currencyFind.value}`,
							{
								parse_mode: 'HTML',

								reply_markup: {
									inline_keyboard: [previousButton('settings')],
								},
							}
						)
					} catch (error) {
						return query.reply(String(error))
					}
				case 'history_transfer':
					console.log('enter to transfer history callback')
					return transferHistory(query)
				case 'create_code':
					return query.scene.enter('create-promo')
				case 'buy':
					query.session.currentTradeType = 'buy'
					const getUserForBuy = await prisma.user.findFirst({
						where: {
							id: query.from.id.toString(),
						},
						include: {
							wallet: true,
						},
					})

					const userBalanceForBuy = await getWalletBalance(
						getUserForBuy?.wallet?.address
					)
					// if (userBalanceForBuy === 0)
					// 	return query.answerCbQuery(
					// 		'üö´ –ë–∞–ª–∞–Ω—Å –Ω–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ BTC.',
					// 		{
					// 			show_alert: true,
					// 		}
					// 	)
					const paymentMethodsForBuy = await prisma.paymentMethod.findMany({
						include: {
							Contract: {
								where: {
									type: 'buy',
								},
							},
						},
					})
					const paymentMethodButtonForBuy: InlineKeyboardButton[][] =
						paymentMethodsForBuy.map(paymentMethod => {
							return [
								{
									callback_data: `buy_payment_method_${paymentMethod.id}`,
									text: `${paymentMethod.name} | [${paymentMethod.Contract.length}]`,
								},
							]
						})
					return query.editMessageText(
						`–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ BTC –∑–∞ RUB.`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: [
									...paymentMethodButtonForBuy,
									previousButton('p2p_transfer'),
								],
							},
						}
					)
				case 'profile':
					const userForProfile = await prisma.user.findFirst({
						where: {
							id: query.from.id.toString(),
						},
						include: {
							Contract: true,
						},
					})
					return query.editMessageText(
						`üë§ <b>${userForProfile?.username}</b> ${userForProfile?.isAdmin ? '[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä]' : ''
						}\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏</b>\nüìà <i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫:</i> <b>${userForProfile?.Contract.length
						}</b>`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: [previousButton('p2p_transfer')],
							},
						}
					)
				case 'sell':
					query.session.currentTradeType = 'sell'
					const getUser = await prisma.user.findFirst({
						where: {
							id: query.from.id.toString(),
						},
						include: {
							wallet: true,
						},
					})
					const userBalance = await getWalletBalance(getUser?.wallet?.address)

					// if (userBalance === 0)
					// 	return query.answerCbQuery(
					// 		'üö´ –ë–∞–ª–∞–Ω—Å –Ω–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ BTC.',
					// 		{
					// 			show_alert: true,
					// 		}
					// 	)
					const paymentMethods = await prisma.paymentMethod.findMany({
						include: {
							Contract: {
								where: {
									type: 'sell',
								},
							},
						},
					})
					const paymentMethodButton: InlineKeyboardButton[][] =
						paymentMethods.map(paymentMethod => {
							return [
								{
									callback_data: `sell_payment_method_${paymentMethod.id}`,
									text: `${paymentMethod.name} | [${paymentMethod.Contract.length}]`,
								},
							]
						})
					return query.editMessageText(
						`–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ BTC –∑–∞ RUB.`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: [
									...paymentMethodButton,
									previousButton('p2p_transfer'),
								],
							},
						}
					)
				case 'add_my_contract':
					return query.scene.enter('add_contract')
				case 'buy_contract':
					query.session.currentContractId = query.scene.state.contractId
					return query.scene.enter('buy-contract', {
						// @ts-ignore
						id: query.scene.state.contractId,
					})
				case 'my_ads':
					return getMyContracts(query)
				case 'my_codes':
					return myCodes(query)
				case 'btc-subscribe':
					try {
						// @ts-ignore
						const userId = query.update.callback_query.from.id.toString();
						
						console.log(`[BTC_SUBSCRIBE] User ${userId} subscribing to BTC rate notifications`);
						
						// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
						await prisma.user.update({
							where: { id: userId },
							data: { isBtcSubscribed: true }
						});
						
						console.log(`[BTC_SUBSCRIBE] Successfully updated subscription status for user ${userId}`);
						
						// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å BTC –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
						const currentRate = await currencyService.getCurrentBTCRate('usd');
						
						// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
						await query.answerCbQuery('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ BTC', { show_alert: true });
						
						// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
						const updatedUser = await prisma.user.findUnique({
							where: { id: userId }
						});
						
						if (!updatedUser) {
							return query.editMessageText(
								'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 
								{
									reply_markup: {
										inline_keyboard: inlineKeyboardForSettings(false)
									}
								}
							);
						}
						
						// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —É—á–µ—Ç–æ–º –ø–æ–¥–ø–∏—Å–∫–∏
						return query.editMessageText(
							`<b>üîß ${config.shopName} | –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ BTC.\n\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: <b>${currentRate ? currentRate.toFixed(2) : '–ù/–î'}$</b>`,
							{
								parse_mode: 'HTML',
								reply_markup: {
									inline_keyboard: inlineKeyboardForSettings(updatedUser.isAdmin, true)
								}
							}
						);
					} catch (error) {
						console.error('[BTC_SUBSCRIBE] Error:', error);
						return query.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫—É—Ä—Å BTC', { show_alert: true });
					}
					break;
				case 'btc-unsubscribe':
					try {
						// @ts-ignore
						const userId = query.update.callback_query.from.id.toString();
						
						// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
						await prisma.user.update({
							where: { id: userId },
							data: { isBtcSubscribed: false }
						});
						
						// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø–∏—Å–∫–µ
						await query.answerCbQuery('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ BTC', { show_alert: true });
						
						// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
						const updatedUser = await prisma.user.findUnique({
							where: { id: userId }
						});
						
						if (!updatedUser) {
							return query.editMessageText(
								'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 
								{
									reply_markup: {
										inline_keyboard: inlineKeyboardForSettings(false)
									}
								}
							);
						}
						
						// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —É—á–µ—Ç–æ–º –æ—Ç–ø–∏—Å–∫–∏
						return query.editMessageText(
							`<b>üîß ${config.shopName} | –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ BTC.`,
							{
								parse_mode: 'HTML',
								reply_markup: {
									inline_keyboard: inlineKeyboardForSettings(updatedUser.isAdmin, false)
								}
							}
						);
					} catch (error) {
						console.error('[BTC_UNSUBSCRIBE] Error:', error);
						return query.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç –∫—É—Ä—Å–∞ BTC', { show_alert: true });
					}
					break;
			}
			const matchRequisite = data.match(/^requisite_(\d+)$/)
			const matchSellPaymentMethod = data.match(/^sell_payment_method_(\d+)$/)
			const matchBuyPaymentMethod = data.match(/^buy_payment_method_(\d+)$/)
			const matchDeleteRequisite = data.match(/^delete_requisite_(\d+)$/)
			const matchSellContract = data.match(/^sell_contract_(\d+)$/)
			const matchBuyContract = data.match(/^buy_contract_(\d+)$/)
			const matchPaymentContract = data.match(/^payment-contract-(\d+)$/)
			const matchDeleteContract = data.match(/^delete-contract-(\d+)$/)
			const matchSendMessageTo = data.match(/^send-message-(\d+)$/)
			const matchPaymentSuccessful = data.match(/^payment-successful-(\d+)$/)
			const matchCancelTransaction = data.match(/^cancel-transaction-(.+)$/)
			const matchUserDetails = data.match(/^admin-user-details-(\d+)$/)
			const matchUserBlock = data.match(/^admin-user-block-(\d+)$/)
			const matchUserUnblock = data.match(/^admin-user-unblock-(\d+)$/)
			const matchUsersPagination = data.match(/^admin-users-page-(\d+)$/)
			const matchUserFreezeTransfer = data.match(/^admin-user-freeze-transfer-(\d+)$/)
			const matchUserUnfreezeTransfer = data.match(/^admin-user-unfreeze-transfer-(\d+)$/)
			const matchUserSetAdmin = data.match(/^admin-user-set-admin-(\d+)$/)
			const matchUserRemoveAdmin = data.match(/^admin-user-remove-admin-(\d+)$/)

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
			if (matchUserDetails) {
				try {
					console.log('[ADMIN_USER_DETAILS] User ID:', matchUserDetails[1]);
					const userId = matchUserDetails[1];
					
					// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					const user = await prisma.user.findFirst({
						where: { id: userId },
						include: { 
							wallet: true 
						}
					});
					
					if (!user) {
						return query.editMessageText(
							'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
							{
								reply_markup: {
									inline_keyboard: [previousButton('admin-users')]
								}
							}
						);
					}
					
					// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö
					const frozenInfo = await frozenBalanceService.checkAvailableBalance(
						userId,
						0 // 0, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—É–º–º—ã
					);
					
					// –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
					const contractCount = await prisma.contract.count({
						where: { userId: userId }
					});
					
					// –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å + –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü)
					const buyerTransactionCount = await prisma.contractTransaction.count({
						where: { buyerId: userId }
					});
					const sellerTransactionCount = await prisma.contractTransaction.count({
						where: { sellerId: userId }
					});
					const transactionCount = buyerTransactionCount + sellerTransactionCount;
					
					// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
					const registeredAt = new Date(user.createdAt).toLocaleString('ru-RU');
					const updatedAt = new Date(user.createdAt).toLocaleString('ru-RU'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º createdAt –≤–º–µ—Å—Ç–æ updatedAt
					
					// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					const actionButtons = [];
					
					// –ö–Ω–æ–ø–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					actionButtons.push([{
						callback_data: user.isBlocked 
							? `admin-user-unblock-${user.id}` 
							: `admin-user-block-${user.id}`,
						text: user.isBlocked 
							? 'üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
							: 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
					}]);
					
					// –ö–Ω–æ–ø–∫–∞ –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
					actionButtons.push([{
						callback_data: user.isFreezeTransfer
							? `admin-user-unfreeze-transfer-${user.id}`
							: `admin-user-freeze-transfer-${user.id}`,
						text: user.isFreezeTransfer
							? 'üí≤ –†–∞–∑—Ä–µ—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã'
							: '‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã'
					}]);
					
					// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è/—Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
					if (!user.isAdmin) {
						// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
						actionButtons.push([{
							callback_data: `admin-user-set-admin-${user.id}`,
							text: 'üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
						}]);
					} else if (!isMasterAdmin(user.id)) {
						// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –Ω–æ –Ω–µ –º–∞—Å—Ç–µ—Ä-–∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤
						actionButtons.push([{
							callback_data: `admin-user-remove-admin-${user.id}`,
							text: 'üë§ –°–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
						}]);
					}
					
					// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
					actionButtons.push(previousButton('admin-users'));
					
					return query.editMessageText(
						`üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n` +
						`ID: <code>${user.id}</code>\n` +
						`–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>${user.username || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</b>\n` +
						`–õ–æ–≥–∏–Ω: <b>${user.login || '–ù–µ —É–∫–∞–∑–∞–Ω'}</b>\n` +
						`–°—Ç–∞—Ç—É—Å: ${getAdminType(user.id, user.isAdmin)}${user.isBlocked ? ' üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : ''}\n` +
						`–ü–µ—Ä–µ–≤–æ–¥—ã: ${user.isFreezeTransfer ? '‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω—ã' : '‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω—ã'}\n\n` +
						`üí∞ <b>–ë–∞–ª–∞–Ω—Å</b>\n` +
						`‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: <b>${frozenInfo.totalBalance.toFixed(8)} BTC</b>\n` +
						`‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${frozenInfo.availableBalance.toFixed(8)} BTC</b>\n` +
						`‚Ä¢ –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${frozenInfo.frozenBalance.toFixed(8)} BTC</b>\n\n` +
						`üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n` +
						`‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: <b>${transactionCount}</b>\n` +
						`‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: <b>${contractCount}</b>\n\n` +
						`‚è∞ <b>–í—Ä–µ–º—è</b>\n` +
						`‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <b>${registeredAt}</b>\n` +
						`‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <b>${updatedAt}</b>`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: actionButtons
							}
						}
					);
				} catch (error) {
					console.error('[ADMIN_USER_DETAILS] Error:', error);
					return query.editMessageText(
						'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ',
						{
							reply_markup: {
								inline_keyboard: [previousButton('admin-users')]
							}
						}
					);
				}
			}
			
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			if (matchUserBlock) {
				try {
					const userId = matchUserBlock[1];
					
					// –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					await prisma.user.update({
						where: { id: userId },
						data: { isBlocked: true }
					});
					
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
					await query.answerCbQuery('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', { show_alert: true });
					
					// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
					const user = await prisma.user.findFirst({
						where: { id: userId },
						include: { wallet: true }
					});
					
					if (!user) {
						return query.editMessageText(
							'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
							{
								reply_markup: {
									inline_keyboard: [previousButton('admin-users')]
								}
							}
						);
					}
					
					// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö
					const frozenInfo = await frozenBalanceService.checkAvailableBalance(
						userId,
						0 // 0, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—É–º–º—ã
					);
					
					// –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
					const contractCount = await prisma.contract.count({
						where: { userId: userId }
					});
					
					// –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å + –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü)
					const buyerTransactionCount = await prisma.contractTransaction.count({
						where: { buyerId: userId }
					});
					const sellerTransactionCount = await prisma.contractTransaction.count({
						where: { sellerId: userId }
					});
					const transactionCount = buyerTransactionCount + sellerTransactionCount;
					
					// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
					const registeredAt = new Date(user.createdAt).toLocaleString('ru-RU');
					const updatedAt = new Date(user.createdAt).toLocaleString('ru-RU'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º createdAt –≤–º–µ—Å—Ç–æ updatedAt
					
					// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					const actionButtons = [];
					
					// –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					actionButtons.push([{
						callback_data: `admin-user-unblock-${user.id}`,
						text: 'üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
					}]);
					
					// –ö–Ω–æ–ø–∫–∞ –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
					actionButtons.push([{
						callback_data: user.isFreezeTransfer
							? `admin-user-unfreeze-transfer-${user.id}`
							: `admin-user-freeze-transfer-${user.id}`,
						text: user.isFreezeTransfer
							? 'üí≤ –†–∞–∑—Ä–µ—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã'
							: '‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã'
					}]);
					
					// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è/—Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
					if (!user.isAdmin) {
						// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
						actionButtons.push([{
							callback_data: `admin-user-set-admin-${user.id}`,
							text: 'üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
						}]);
					} else if (!isMasterAdmin(user.id)) {
						// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –Ω–æ –Ω–µ –º–∞—Å—Ç–µ—Ä-–∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤
						actionButtons.push([{
							callback_data: `admin-user-remove-admin-${user.id}`,
							text: 'üë§ –°–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
						}]);
					}
					
					// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
					actionButtons.push(previousButton('admin-users'));
					
					return query.editMessageText(
						`üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n` +
						`ID: <code>${user.id}</code>\n` +
						`–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>${user.username || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</b>\n` +
						`–õ–æ–≥–∏–Ω: <b>${user.login || '–ù–µ —É–∫–∞–∑–∞–Ω'}</b>\n` +
						`–°—Ç–∞—Ç—É—Å: ${getAdminType(user.id, user.isAdmin)} üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n` +
						`–ü–µ—Ä–µ–≤–æ–¥—ã: ${user.isFreezeTransfer ? '‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω—ã' : '‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω—ã'}\n\n` +
						`üí∞ <b>–ë–∞–ª–∞–Ω—Å</b>\n` +
						`‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: <b>${frozenInfo.totalBalance.toFixed(8)} BTC</b>\n` +
						`‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${frozenInfo.availableBalance.toFixed(8)} BTC</b>\n` +
						`‚Ä¢ –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${frozenInfo.frozenBalance.toFixed(8)} BTC</b>\n\n` +
						`üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n` +
						`‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: <b>${transactionCount}</b>\n` +
						`‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: <b>${contractCount}</b>\n\n` +
						`‚è∞ <b>–í—Ä–µ–º—è</b>\n` +
						`‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <b>${registeredAt}</b>\n` +
						`‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <b>${updatedAt}</b>`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: actionButtons
							}
						}
					);
				} catch (error) {
					console.error('[ADMIN_USER_BLOCK] Error:', error);
					return query.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { show_alert: true });
				}
			}
			
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			if (matchUserUnblock) {
				try {
					const userId = matchUserUnblock[1];
					
					// –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					await prisma.user.update({
						where: { id: userId },
						data: { isBlocked: false }
					});
					
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
					await query.answerCbQuery('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', { show_alert: true });
					
					// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
					const user = await prisma.user.findFirst({
						where: { id: userId },
						include: { wallet: true }
					});
					
					if (!user) {
						return query.editMessageText(
							'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
							{
								reply_markup: {
									inline_keyboard: [previousButton('admin-users')]
								}
							}
						);
					}
					
					// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö
					const frozenInfo = await frozenBalanceService.checkAvailableBalance(
						userId,
						0 // 0, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—É–º–º—ã
					);
					
					// –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
					const contractCount = await prisma.contract.count({
						where: { userId: userId }
					});
					
					// –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å + –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü)
					const buyerTransactionCount = await prisma.contractTransaction.count({
						where: { buyerId: userId }
					});
					const sellerTransactionCount = await prisma.contractTransaction.count({
						where: { sellerId: userId }
					});
					const transactionCount = buyerTransactionCount + sellerTransactionCount;
					
					// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
					const registeredAt = new Date(user.createdAt).toLocaleString('ru-RU');
					const updatedAt = new Date(user.createdAt).toLocaleString('ru-RU'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º createdAt –≤–º–µ—Å—Ç–æ updatedAt
					
					// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					const actionButtons = [];
					
					// –ö–Ω–æ–ø–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					actionButtons.push([{
						callback_data: `admin-user-block-${user.id}`,
						text: 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
					}]);
					
					// –ö–Ω–æ–ø–∫–∞ –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
					actionButtons.push([{
						callback_data: user.isFreezeTransfer
							? `admin-user-unfreeze-transfer-${user.id}`
							: `admin-user-freeze-transfer-${user.id}`,
						text: user.isFreezeTransfer
							? 'üí≤ –†–∞–∑—Ä–µ—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã'
							: '‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã'
					}]);
					
					// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è/—Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
					if (!user.isAdmin) {
						// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
						actionButtons.push([{
							callback_data: `admin-user-set-admin-${user.id}`,
							text: 'üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
						}]);
					} else if (!isMasterAdmin(user.id)) {
						// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –Ω–æ –Ω–µ –º–∞—Å—Ç–µ—Ä-–∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤
						actionButtons.push([{
							callback_data: `admin-user-remove-admin-${user.id}`,
							text: 'üë§ –°–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
						}]);
					}
					
					// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
					actionButtons.push(previousButton('admin-users'));
					
					return query.editMessageText(
						`üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n` +
						`ID: <code>${user.id}</code>\n` +
						`–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>${user.username || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</b>\n` +
						`–õ–æ–≥–∏–Ω: <b>${user.login || '–ù–µ —É–∫–∞–∑–∞–Ω'}</b>\n` +
						`–°—Ç–∞—Ç—É—Å: ${getAdminType(user.id, user.isAdmin)} ${user.isBlocked ? ' üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : ''}\n` +
						`–ü–µ—Ä–µ–≤–æ–¥—ã: ${user.isFreezeTransfer ? '‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω—ã' : '‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω—ã'}\n\n` +
						`üí∞ <b>–ë–∞–ª–∞–Ω—Å</b>\n` +
						`‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: <b>${frozenInfo.totalBalance.toFixed(8)} BTC</b>\n` +
						`‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${frozenInfo.availableBalance.toFixed(8)} BTC</b>\n` +
						`‚Ä¢ –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${frozenInfo.frozenBalance.toFixed(8)} BTC</b>\n\n` +
						`üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n` +
						`‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: <b>${transactionCount}</b>\n` +
						`‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: <b>${contractCount}</b>\n\n` +
						`‚è∞ <b>–í—Ä–µ–º—è</b>\n` +
						`‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <b>${registeredAt}</b>\n` +
						`‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <b>${updatedAt}</b>`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: actionButtons
							}
						}
					);
				} catch (error) {
					console.error('[ADMIN_USER_REMOVE_ADMIN] Error:', error);
					return query.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', { show_alert: true });
				}
			}
			
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
			if (matchUserSetAdmin) {
				try {
					const userId = matchUserSetAdmin[1];
					
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–∞—Å—Ç–µ—Ä-–∞–¥–º–∏–Ω–æ–º
					if (isMasterAdmin(userId)) {
						// –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Ç–µ—Ä-–∞–¥–º–∏–Ω, –∑–∞–ø—Ä–µ—â–∞–µ–º –Ω–∞–∑–Ω–∞—á–∞—Ç—å –ø—Ä–∞–≤–∞
						return query.answerCbQuery('‚õî –ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–∞–≤–∞ System Admin', { show_alert: true });
					}
					
					// –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
					await prisma.user.update({
						where: { id: userId },
						data: { isAdmin: true }
					});
					
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø—Ä–∞–≤
					await query.answerCbQuery('‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã', { show_alert: true });
					
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
					await query.telegram.sendMessage(
						userId,
						`üë§ <b>–í—ã —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è ${config.shopName} –Ω–∞–∑–Ω–∞—á–∏–ª–∞ –≤–∞–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π.\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: [
									[{ text: 'üõé –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π', callback_data: 'support' }]
								]
							}
						}
					);
					
					// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
					const user = await prisma.user.findFirst({
						where: { id: userId },
						include: { wallet: true }
					});
					
					if (!user) {
						return query.editMessageText(
							'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
							{
								reply_markup: {
									inline_keyboard: [previousButton('admin-users')]
								}
							}
						);
					}
					
					// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö
					const frozenInfo = await frozenBalanceService.checkAvailableBalance(
						userId,
						0 // 0, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—É–º–º—ã
					);
					
					// –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
					const contractCount = await prisma.contract.count({
						where: { userId: userId }
					});
					
					// –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å + –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü)
					const buyerTransactionCount = await prisma.contractTransaction.count({
						where: { buyerId: userId }
					});
					const sellerTransactionCount = await prisma.contractTransaction.count({
						where: { sellerId: userId }
					});
					const transactionCount = buyerTransactionCount + sellerTransactionCount;
					
					// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
					const registeredAt = new Date(user.createdAt).toLocaleString('ru-RU');
					const updatedAt = user.updatedAt ? new Date(user.updatedAt).toLocaleString('ru-RU') : registeredAt;
					
					// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					const actionButtons: InlineKeyboardButton[][] = [];
					
					// –ö–Ω–æ–ø–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					actionButtons.push([{
						callback_data: user.isBlocked 
							? `admin-user-unblock-${user.id}` 
							: `admin-user-block-${user.id}`,
						text: user.isBlocked 
							? 'üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
							: 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
					}]);
					
					// –ö–Ω–æ–ø–∫–∞ –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
					actionButtons.push([{
						callback_data: user.isFreezeTransfer
							? `admin-user-unfreeze-transfer-${user.id}`
							: `admin-user-freeze-transfer-${user.id}`,
						text: user.isFreezeTransfer
							? 'üí≤ –†–∞–∑—Ä–µ—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã'
							: '‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã'
					}]);
					
					// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è/—Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
					if (!user.isAdmin) {
						// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
						actionButtons.push([{
							callback_data: `admin-user-set-admin-${user.id}`,
							text: 'üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
						}]);
					} else if (!isMasterAdmin(user.id)) {
						// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –Ω–æ –Ω–µ –º–∞—Å—Ç–µ—Ä-–∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤
						actionButtons.push([{
							callback_data: `admin-user-remove-admin-${user.id}`,
							text: 'üë§ –°–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
						}]);
					}
					
					// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
					actionButtons.push(previousButton('admin-users'));
					
					return query.editMessageText(
						`üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n` +
						`ID: <code>${user.id}</code>\n` +
						`–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>${user.username || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</b>\n` +
						`–õ–æ–≥–∏–Ω: <b>${user.login || '–ù–µ —É–∫–∞–∑–∞–Ω'}</b>\n` +
						`–°—Ç–∞—Ç—É—Å: ${getAdminType(user.id, user.isAdmin)} ${user.isBlocked ? ' üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : ''}\n` +
						`–ü–µ—Ä–µ–≤–æ–¥—ã: ${user.isFreezeTransfer ? '‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω—ã' : '‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω—ã'}\n\n` +
						`üí∞ <b>–ë–∞–ª–∞–Ω—Å</b>\n` +
						`‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: <b>${frozenInfo.totalBalance.toFixed(8)} BTC</b>\n` +
						`‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${frozenInfo.availableBalance.toFixed(8)} BTC</b>\n` +
						`‚Ä¢ –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${frozenInfo.frozenBalance.toFixed(8)} BTC</b>\n\n` +
						`üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n` +
						`‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: <b>${transactionCount}</b>\n` +
						`‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: <b>${contractCount}</b>\n\n` +
						`‚è∞ <b>–í—Ä–µ–º—è</b>\n` +
						`‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <b>${registeredAt}</b>\n` +
						`‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <b>${updatedAt}</b>`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: actionButtons
							}
						}
					);
				} catch (error) {
					console.error('[ADMIN_USER_SET_ADMIN] Error:', error);
					return query.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', { show_alert: true });
				}
			}
			
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
			if (matchUserRemoveAdmin) {
				try {
					const userId = matchUserRemoveAdmin[1];
					
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–∞—Å—Ç–µ—Ä-–∞–¥–º–∏–Ω–æ–º
					if (isMasterAdmin(userId)) {
						// –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Ç–µ—Ä-–∞–¥–º–∏–Ω, –∑–∞–ø—Ä–µ—â–∞–µ–º —Å–Ω–∏–º–∞—Ç—å –ø—Ä–∞–≤–∞
						return query.answerCbQuery('‚õî –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ —É System Admin', { show_alert: true });
					}
					
					// –°–Ω–∏–º–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
					await prisma.user.update({
						where: { id: userId },
						data: { isAdmin: false }
					});
					
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–Ω—è—Ç–∏–∏ –ø—Ä–∞–≤
					await query.answerCbQuery('‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω—è—Ç—ã', { show_alert: true });
					
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
					await query.telegram.sendMessage(
						userId,
						`üë§ <b>–í—ã –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è ${config.shopName} –æ—Ç–æ–∑–≤–∞–ª–∞ –≤–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n–í—ã –±–æ–ª—å—à–µ –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π.\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: [
									[{ text: 'üõé –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π', callback_data: 'support' }]
								]
							}
						}
					);
					
					// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
					const user = await prisma.user.findFirst({
						where: { id: userId },
						include: { wallet: true }
					});
					
					if (!user) {
						return query.editMessageText(
							'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
							{
								reply_markup: {
									inline_keyboard: [previousButton('admin-users')]
								}
							}
						);
					}
					
					// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö
					const frozenInfo = await frozenBalanceService.checkAvailableBalance(
						userId,
						0 // 0, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—É–º–º—ã
					);
					
					// –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
					const contractCount = await prisma.contract.count({
						where: { userId: userId }
					});
					
					// –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å + –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü)
					const buyerTransactionCount = await prisma.contractTransaction.count({
						where: { buyerId: userId }
					});
					const sellerTransactionCount = await prisma.contractTransaction.count({
						where: { sellerId: userId }
					});
					const transactionCount = buyerTransactionCount + sellerTransactionCount;
					
					// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
					const registeredAt = new Date(user.createdAt).toLocaleString('ru-RU');
					const updatedAt = user.updatedAt ? new Date(user.updatedAt).toLocaleString('ru-RU') : registeredAt;
					
					// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					const actionButtons: InlineKeyboardButton[][] = [];
					
					// –ö–Ω–æ–ø–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					actionButtons.push([{
						callback_data: user.isBlocked 
							? `admin-user-unblock-${user.id}` 
							: `admin-user-block-${user.id}`,
						text: user.isBlocked 
							? 'üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
							: 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
					}]);
					
					// –ö–Ω–æ–ø–∫–∞ –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
					actionButtons.push([{
						callback_data: user.isFreezeTransfer
							? `admin-user-unfreeze-transfer-${user.id}`
							: `admin-user-freeze-transfer-${user.id}`,
						text: user.isFreezeTransfer
							? 'üí≤ –†–∞–∑—Ä–µ—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã'
							: '‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã'
					}]);
					
					// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è/—Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
					if (!user.isAdmin) {
						// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
						actionButtons.push([{
							callback_data: `admin-user-set-admin-${user.id}`,
							text: 'üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
						}]);
					} else if (!isMasterAdmin(user.id)) {
						// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –Ω–æ –Ω–µ –º–∞—Å—Ç–µ—Ä-–∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤
						actionButtons.push([{
							callback_data: `admin-user-remove-admin-${user.id}`,
							text: 'üë§ –°–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
						}]);
					}
					
					// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
					actionButtons.push(previousButton('admin-users'));
					
					return query.editMessageText(
						`üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n` +
						`ID: <code>${user.id}</code>\n` +
						`–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>${user.username || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</b>\n` +
						`–õ–æ–≥–∏–Ω: <b>${user.login || '–ù–µ —É–∫–∞–∑–∞–Ω'}</b>\n` +
						`–°—Ç–∞—Ç—É—Å: ${getAdminType(user.id, user.isAdmin)} ${user.isBlocked ? ' üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : ''}\n` +
						`–ü–µ—Ä–µ–≤–æ–¥—ã: ${user.isFreezeTransfer ? '‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω—ã' : '‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω—ã'}\n\n` +
						`üí∞ <b>–ë–∞–ª–∞–Ω—Å</b>\n` +
						`‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: <b>${frozenInfo.totalBalance.toFixed(8)} BTC</b>\n` +
						`‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${frozenInfo.availableBalance.toFixed(8)} BTC</b>\n` +
						`‚Ä¢ –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${frozenInfo.frozenBalance.toFixed(8)} BTC</b>\n\n` +
						`üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n` +
						`‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: <b>${transactionCount}</b>\n` +
						`‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: <b>${contractCount}</b>\n\n` +
						`‚è∞ <b>–í—Ä–µ–º—è</b>\n` +
						`‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <b>${registeredAt}</b>\n` +
						`‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <b>${updatedAt}</b>`,
						{
							parse_mode: 'HTML',
							reply_markup: {
								inline_keyboard: actionButtons
							}
						}
					);
				} catch (error) {
					console.error('[ADMIN_USER_REMOVE_ADMIN] Error:', error);
					return query.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', { show_alert: true });
				}
			}
		} catch (error) {
			console.log(error)
			return query.reply('‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')
		}
	})
}
